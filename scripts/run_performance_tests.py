#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import subprocess
import sys
from pathlib import Path

from app.services.performance_monitor import get_performance_summary
from app.services.cache_service import cache_service


async def run_unit_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    result = subprocess.run([
        sys.executable, "-m", "pytest",
        "tests/test_performance_optimization.py",
        "-v",
        "--tb=short"
    ], capture_output=True, text=True, cwd=Path(__file__).parent.parent)
    
    if result.returncode == 0:
        print("‚úÖ Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ unit —Ç–µ—Å—Ç–∞—Ö: {result.stderr}")
        return False


async def run_load_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    print("üìà –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    scenarios = [
        {"users": 10, "duration": 30, "name": "–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç"},
        {"users": 25, "duration": 60, "name": "–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞"},
        {"users": 50, "duration": 120, "name": "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"}
    ]
    
    for scenario in scenarios:
        print(f"\nüîÑ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario['name']}")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {scenario['users']}")
        print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {scenario['duration']} —Å–µ–∫")
        
        result = subprocess.run([
            sys.executable, "scripts/load_test.py",
            "--users", str(scenario["users"]),
            "--duration", str(scenario["duration"])
        ], capture_output=True, text=True, cwd=Path(__file__).parent.parent)
        
        if result.returncode == 0:
            print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π '{scenario['name']}' –ø—Ä–æ–π–¥–µ–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ '{scenario['name']}': {result.stderr}")
            return False
    
    return True


async def test_cache_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞"""
    print("üíæ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞...")
    
    # –¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_user_id = 123456789
    
    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ
    start_time = asyncio.get_event_loop().time()
    await cache_service.get_user(test_user_id)
    first_call_time = asyncio.get_event_loop().time() - start_time
    
    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ (–µ—Å–ª–∏ –∫–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç)
    start_time = asyncio.get_event_loop().time()
    await cache_service.get_user(test_user_id)
    second_call_time = asyncio.get_event_loop().time() - start_time
    
    print(f"   –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {first_call_time:.3f}—Å")
    print(f"   –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {second_call_time:.3f}—Å")
    
    if second_call_time < first_call_time:
        print("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print("‚ö†Ô∏è –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ


async def test_database_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    from app.repositories.optimized_user_repo import optimized_user_repo
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    start_time = asyncio.get_event_loop().time()
    stats = await optimized_user_repo.get_user_statistics()
    db_time = asyncio.get_event_loop().time() - start_time
    
    print(f"   –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {db_time:.3f}—Å")
    
    if db_time < 1.0:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ")
        return True
    elif db_time < 3.0:
        print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã")
        return True
    else:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ")
        return False


async def test_monitoring():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üìä –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    summary = await get_performance_summary()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    required_keys = ["system_resources", "performance_report", "database_stats", "cache_stats"]
    missing_keys = [key for key in required_keys if key not in summary]
    
    if not missing_keys:
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        system_resources = summary["system_resources"]
        print(f"   CPU: {system_resources['cpu']['percent']:.1f}%")
        print(f"   –ü–∞–º—è—Ç—å: {system_resources['memory']['rss_mb']:.1f}MB")
        print(f"   –î–∏—Å–∫: {system_resources['disk']['usage_percent']:.1f}%")
        
        return True
    else:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {missing_keys}")
        return False


async def test_cache_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞"""
    print("üîß –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞...")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    frequent_data = await cache_service.get_frequently_accessed_data()
    
    if frequent_data and "roles" in frequent_data:
        print("‚úÖ –ö–µ—à —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
        await cache_service.clear_all_caches()
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
    else:
        print("‚ùå –ö–µ—à —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False


async def generate_performance_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    summary = await get_performance_summary()
    
    report = f"""
# –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SchoolBot

## –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
- CPU: {summary['system_resources']['cpu']['percent']:.1f}%
- –ü–∞–º—è—Ç—å: {summary['system_resources']['memory']['rss_mb']:.1f}MB
- –î–∏—Å–∫: {summary['system_resources']['disk']['usage_percent']:.1f}%

## –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤: {summary['performance_report'].get('total_calls', 'N/A')}
- –£—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤: {summary['performance_report'].get('successful_calls', 'N/A')}
- –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {summary['performance_report'].get('error_rate_percent', 'N/A')}%

## –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
- –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {summary['database_stats'].get('total_queries', 'N/A')}
- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {summary['database_stats'].get('average_time', 'N/A')}—Å
- –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {summary['database_stats'].get('slow_queries_count', 'N/A')}

## –ö–µ—à
- –ü–æ–ø–∞–¥–∞–Ω–∏—è: {summary['cache_stats'].get('hits', 'N/A')}
- –ü—Ä–æ–º–∞—Ö–∏: {summary['cache_stats'].get('misses', 'N/A')}
- Hit ratio: {summary['cache_stats'].get('hit_ratio', 'N/A')}%
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = Path(__file__).parent.parent / "performance_test_report.md"
    with open(report_file, "w", encoding="utf-8") as f:
        f.write(report)
    
    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("="*60)
    
    tests = [
        ("Unit —Ç–µ—Å—Ç—ã", run_unit_tests),
        ("–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã", run_load_tests),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞", test_cache_performance),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î", test_database_performance),
        ("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", test_monitoring),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞", test_cache_functionality),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞", generate_performance_report)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    return passed == total


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 