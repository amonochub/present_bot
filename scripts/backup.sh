#!/bin/bash
set -euo pipefail

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/backup.sh [options]

BACKUP_DIR="./backups"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
COMPRESS=${COMPRESS:-true}
KEEP_DAYS=${KEEP_DAYS:-14}
NOTIFY_TELEGRAM=${NOTIFY_TELEGRAM:-false}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
notify_telegram() {
    local message="$1"
    if [[ "$NOTIFY_TELEGRAM" == "true" && -n "${TELEGRAM_BOT_TOKEN:-}" && -n "${TELEGRAM_CHAT_ID:-}" ]]; then
        curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"${TELEGRAM_CHAT_ID}\",\"text\":\"$message\",\"parse_mode\":\"HTML\"}" || true
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤
create_backup_dir() {
    if [[ ! -d "$BACKUP_DIR" ]]; then
        echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤: $BACKUP_DIR"
        mkdir -p "$BACKUP_DIR"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
check_database_connection() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."

    if ! docker-compose exec -T postgres pg_isready -U schoolbot > /dev/null 2>&1; then
        echo "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        notify_telegram "‚ùå <b>–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞</b>\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        exit 1
    fi

    echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
create_backup() {
    local backup_name="schoolbot_${TIMESTAMP}"
    local backup_file="${BACKUP_DIR}/${backup_name}.sql"
    local compressed_file="${backup_file}.gz"

    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: $backup_name"
    notify_telegram "üîÑ <b>–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞</b>\n–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."

    # –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    echo "üóÑÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    if docker-compose exec -T postgres pg_dump -U schoolbot -d schoolbot --verbose --no-password > "$backup_file"; then
        echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: $backup_file"

        # –°–∂–∏–º–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if [[ "$COMPRESS" == "true" ]]; then
            echo "üóúÔ∏è –°–∂–∞—Ç–∏–µ –±—ç–∫–∞–ø–∞..."
            gzip "$backup_file"
            backup_file="$compressed_file"
            echo "‚úÖ –ë—ç–∫–∞–ø —Å–∂–∞—Ç: $backup_file"
        fi

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        local file_size=$(du -h "$backup_file" | cut -f1)
        local file_size_bytes=$(stat -c%s "$backup_file")
        echo "üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $file_size ($file_size_bytes –±–∞–π—Ç)"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        if [[ "$COMPRESS" == "true" ]]; then
            echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞..."
            if gzip -t "$backup_file"; then
                echo "‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
            else
                echo "‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞"
                notify_telegram "‚ùå <b>–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞</b>\n–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
                exit 1
            fi
        fi

        notify_telegram "‚úÖ <b>–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω</b>\n–§–∞–π–ª: $backup_name\n–†–∞–∑–º–µ—Ä: $file_size"

    else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞"
        notify_telegram "‚ùå <b>–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
cleanup_old_backups() {
    echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ $KEEP_DAYS –¥–Ω–µ–π)..."

    local deleted_count=0
    local total_size_before=$(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1 || echo "0")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    if [[ "$COMPRESS" == "true" ]]; then
        deleted_count=$(find "$BACKUP_DIR" -type f -name "*.sql.gz" -mtime +$KEEP_DAYS -delete -print | wc -l)
    else
        deleted_count=$(find "$BACKUP_DIR" -type f -name "*.sql" -mtime +$KEEP_DAYS -delete -print | wc -l)
    fi

    if [[ $deleted_count -gt 0 ]]; then
        local total_size_after=$(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1 || echo "0")
        echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $deleted_count"
        echo "üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: $total_size_before ‚Üí $total_size_after"
    else
        echo "‚úÖ –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
show_statistics() {
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤:"

    local total_files=0
    local total_size=0

    if [[ "$COMPRESS" == "true" ]]; then
        total_files=$(find "$BACKUP_DIR" -type f -name "*.sql.gz" | wc -l)
        total_size=$(find "$BACKUP_DIR" -type f -name "*.sql.gz" -exec du -cb {} + | tail -1 | cut -f1)
    else
        total_files=$(find "$BACKUP_DIR" -type f -name "*.sql" | wc -l)
        total_size=$(find "$BACKUP_DIR" -type f -name "*.sql" -exec du -cb {} + | tail -1 | cut -f1)
    fi

    echo "üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: $total_files"
    echo "üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $(numfmt --to=iec $total_size)"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –±—ç–∫–∞–ø–æ–≤
    echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã:"
    if [[ "$COMPRESS" == "true" ]]; then
        find "$BACKUP_DIR" -type f -name "*.sql.gz" -printf "%T@ %p\n" | sort -nr | head -5 | while read timestamp file; do
            local date=$(date -d "@$timestamp" '+%Y-%m-%d %H:%M:%S')
            local size=$(du -h "$file" | cut -f1)
            echo "  üìÑ $(basename "$file") ($date, $size)"
        done
    else
        find "$BACKUP_DIR" -type f -name "*.sql" -printf "%T@ %p\n" | sort -nr | head -5 | while read timestamp file; do
            local date=$(date -d "@$timestamp" '+%Y-%m-%d %H:%M:%S')
            local size=$(du -h "$file" | cut -f1)
            echo "  üìÑ $(basename "$file") ($date, $size)"
        done
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
check_disk_space() {
    echo "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞..."

    local available_space=$(df "$BACKUP_DIR" | awk 'NR==2 {print $4}')
    local required_space=1048576  # 1GB –≤ –±–∞–π—Ç–∞—Ö

    if [[ $available_space -lt $required_space ]]; then
        echo "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"
        echo "–î–æ—Å—Ç—É–ø–Ω–æ: $(numfmt --to=iec $available_space)"
        echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: $(numfmt --to=iec $required_space)"

        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        echo "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–∞
create_backup_metadata() {
    local backup_name="schoolbot_${TIMESTAMP}"
    local metadata_file="${BACKUP_DIR}/${backup_name}.meta"

    cat > "$metadata_file" << EOF
# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±—ç–∫–∞–ø–∞ SchoolBot
backup_date: $(date '+%Y-%m-%d %H:%M:%S')
backup_timestamp: $TIMESTAMP
database: schoolbot
version: $(docker-compose exec -T bot python -c "import app; print(app.__version__)" 2>/dev/null || echo "unknown")
compressed: $COMPRESS
created_by: backup.sh
hostname: $(hostname)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
$(docker-compose exec -T postgres psql -U schoolbot -d schoolbot -t -c "
SELECT
    'users: ' || COUNT(*) as users_count
FROM users;
" 2>/dev/null || echo "users: unknown")

$(docker-compose exec -T postgres psql -U schoolbot -d schoolbot -t -c "
SELECT
    'tickets: ' || COUNT(*) as tickets_count
FROM tickets;
" 2>/dev/null || echo "tickets: unknown")

$(docker-compose exec -T postgres psql -U schoolbot -d schoolbot -t -c "
SELECT
    'notes: ' || COUNT(*) as notes_count
FROM notes;
" 2>/dev/null || echo "notes: unknown")
EOF

    echo "üìù –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: $metadata_file"
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."
    echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $BACKUP_DIR"
    echo "üóúÔ∏è –°–∂–∞—Ç–∏–µ: $COMPRESS"
    echo "üóëÔ∏è –•—Ä–∞–Ω–µ–Ω–∏–µ: $KEEP_DAYS –¥–Ω–µ–π"
    echo ""

    create_backup_dir
    check_disk_space
    check_database_connection
    create_backup
    create_backup_metadata
    cleanup_old_backups
    show_statistics

    echo ""
    echo "üéâ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: ./scripts/restore.sh"
    echo "- –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤: ls -la $BACKUP_DIR/"
    echo "- –†–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–æ–≤: du -sh $BACKUP_DIR/"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
while [[ $# -gt 0 ]]; do
    case $1 in
        --no-compress)
            COMPRESS=false
            shift
            ;;
        --keep-days)
            KEEP_DAYS="$2"
            shift 2
            ;;
        --notify)
            NOTIFY_TELEGRAM=true
            shift
            ;;
        --help)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [options]"
            echo "Options:"
            echo "  --no-compress    –ù–µ —Å–∂–∏–º–∞—Ç—å –±—ç–∫–∞–ø"
            echo "  --keep-days N    –•—Ä–∞–Ω–∏—Ç—å –±—ç–∫–∞–ø—ã N –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $KEEP_DAYS)"
            echo "  --notify         –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"
            echo "  --help           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            exit 0
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
done

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
main "$@"
