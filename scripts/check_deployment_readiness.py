#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é
"""

import os
import sys
import subprocess
from pathlib import Path
from typing import List, Tuple


def check_git_status() -> Tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    issues = []
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        result = subprocess.run(['git', 'rev-parse', '--git-dir'], 
                              capture_output=True, text=True)
        if result.returncode != 0:
            issues.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
            return False, issues
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        result = subprocess.run(['git', 'diff-index', '--quiet', 'HEAD', '--'], 
                              capture_output=True, text=True)
        if result.returncode != 0:
            issues.append("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ç–∫–µ
        result = subprocess.run(['git', 'branch', '--show-current'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            branch = result.stdout.strip()
            if branch != 'main' and branch != 'master':
                issues.append(f"‚ö†Ô∏è  –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {branch} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è main/master)")
        
        return len(issues) == 0, issues
        
    except Exception as e:
        issues.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ git: {e}")
        return False, issues


def check_required_files() -> Tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    issues = []
    required_files = [
        'requirements.txt',
        'docker-compose.yml',
        'Dockerfile',
        'app/bot.py',
        'app/config.py',
        'scripts/run_migrations.sh',
        'manage.py',
        'env.example'
    ]
    
    for file_path in required_files:
        if not Path(file_path).exists():
            issues.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file_path}")
    
    return len(issues) == 0, issues


def check_environment_variables() -> Tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    issues = []
    required_vars = [
        'TELEGRAM_TOKEN',
        'DB_NAME',
        'DB_USER', 
        'DB_PASS'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    env_file = Path('.env')
    if env_file.exists():
        env_content = env_file.read_text()
        for var in required_vars:
            if f'{var}=' not in env_content:
                issues.append(f"‚ö†Ô∏è  –í .env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {var}")
    else:
        issues.append("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∏–∑ env.example)")
    
    return len(issues) == 0, issues


def check_docker_files() -> Tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Docker —Ñ–∞–π–ª—ã"""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile
    dockerfile = Path('Dockerfile')
    if dockerfile.exists():
        content = dockerfile.read_text()
        if 'python:3.11' not in content:
            issues.append("‚ö†Ô∏è  Dockerfile –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é Python")
    else:
        issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Dockerfile")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.yml
    compose_file = Path('docker-compose.yml')
    if compose_file.exists():
        content = compose_file.read_text()
        if 'version:' not in content:
            issues.append("‚ö†Ô∏è  docker-compose.yml –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º")
    else:
        issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç docker-compose.yml")
    
    return len(issues) == 0, issues


def check_requirements() -> Tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç requirements.txt"""
    issues = []
    
    requirements_file = Path('requirements.txt')
    if not requirements_file.exists():
        issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç requirements.txt")
        return False, issues
    
    content = requirements_file.read_text()
    required_packages = [
        'aiogram',
        'sqlalchemy',
        'asyncpg',
        'redis',
        'pydantic'
    ]
    
    for package in required_packages:
        if package not in content:
            issues.append(f"‚ö†Ô∏è  –í requirements.txt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {package}")
    
    return len(issues) == 0, issues


def check_scripts() -> Tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã"""
    issues = []
    
    scripts_dir = Path('scripts')
    if not scripts_dir.exists():
        issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è scripts/")
        return False, issues
    
    required_scripts = [
        'run_migrations.sh',
        'deploy.sh'
    ]
    
    for script in required_scripts:
        script_path = scripts_dir / script
        if not script_path.exists():
            issues.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∫—Ä–∏–ø—Ç: scripts/{script}")
        elif not os.access(script_path, os.X_OK):
            issues.append(f"‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π: scripts/{script}")
    
    return len(issues) == 0, issues


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é...\n")
    
    checks = [
        ("Git —Å—Ç–∞—Ç—É—Å", check_git_status),
        ("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã", check_required_files),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment_variables),
        ("Docker —Ñ–∞–π–ª—ã", check_docker_files),
        ("Requirements", check_requirements),
        ("–°–∫—Ä–∏–ø—Ç—ã", check_scripts),
    ]
    
    all_passed = True
    all_issues = []
    
    for check_name, check_func in checks:
        print(f"üìã {check_name}...")
        passed, issues = check_func()
        
        if passed:
            print("‚úÖ OK")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã:")
            for issue in issues:
                print(f"   {issue}")
            all_passed = False
        
        all_issues.extend(issues)
        print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("=" * 50)
    if all_passed:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é.")
        print("\nüöÄ –î–ª—è –¥–µ–ø–ª–æ—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   export SERVER_HOST=89.169.38.246")
        print("   export SERVER_USER=root")
        print("   ./scripts/deploy.sh")
    else:
        print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º:")
        for issue in all_issues:
            print(f"   {issue}")
        print("\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞.")
        sys.exit(1)


if __name__ == "__main__":
    main() 