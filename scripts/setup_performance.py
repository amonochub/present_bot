#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SchoolBot
"""

import asyncio
import os
import subprocess
import sys
from pathlib import Path

import redis.asyncio as redis
from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine

from app.config import settings


async def check_redis_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
    try:
        redis_client = redis.from_url(settings.REDIS_URL)
        await redis_client.ping()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        return False


async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        engine = create_async_engine(settings.DATABASE_URL)
        async with engine.begin() as conn:
            await conn.execute(text("SELECT 1"))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


async def apply_database_migrations():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        result = subprocess.run(
            ["alembic", "upgrade", "head"],
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent.parent
        )
        if result.returncode == 0:
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False


async def setup_cache():
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–µ—à"""
    try:
        redis_client = redis.from_url(settings.REDIS_URL)
        
        # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        await redis_client.flushdb()
        
        # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Redis
        await redis_client.config_set("maxmemory", "512mb")
        await redis_client.config_set("maxmemory-policy", "allkeys-lru")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        maxmemory = await redis_client.config_get("maxmemory")
        policy = await redis_client.config_get("maxmemory-policy")
        
        print(f"‚úÖ –ö–µ—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω: maxmemory={maxmemory['maxmemory']}, policy={policy['maxmemory-policy']}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∞: {e}")
        return False


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    required_packages = [
        "aiocache",
        "locust", 
        "psutil",
        "prometheus_client"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if missing_packages:
        print(f"\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    return True


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = [
        "TELEGRAM_TOKEN",
        "DB_NAME",
        "DB_USER", 
        "DB_PASS",
        "DB_HOST",
        "REDIS_DSN"
    ]
    
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
            print(f"‚ùå {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print(f"‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    if missing_vars:
        print(f"\nüîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"export {var}=your_value")
        return False
    
    return True


async def run_performance_test():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        print("\nüß™ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        result = subprocess.run([
            sys.executable, "scripts/load_test.py",
            "--users", "10",
            "--duration", "30"
        ], capture_output=True, text=True, cwd=Path(__file__).parent.parent)
        
        if result.returncode == 0:
            print("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False


def print_summary():
    """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("\n" + "="*60)
    print("üìä –°–í–û–î–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("="*60)
    
    print("\nüéØ –ß—Ç–æ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å Redis")
    print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ë–î")
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤")
    print("‚úÖ –î–∞—à–±–æ—Ä–¥—ã Grafana")
    
    print("\nüìà –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 60-80%")
    print("‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 5-10 —Ä–∞–∑")
    print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 30-40%")
    print("‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: uptime 99.9%")
    
    print("\nüõ†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: docker-compose up -d")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥—ã: http://localhost:3000")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –≤ Alertmanager")
    print("4. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    print("\nüìö –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("‚Ä¢ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: python scripts/load_test.py")
    print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞: curl http://localhost:8080/health/cache")
    print("‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏: curl http://localhost:8080/metrics")
    print("‚Ä¢ –õ–æ–≥–∏: docker-compose logs -f bot")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SchoolBot")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    if not check_dependencies():
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    if not check_environment():
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    print("\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    redis_ok = await check_redis_connection()
    db_ok = await check_database_connection()
    
    if not (redis_ok and db_ok):
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis –∏ –ë–î")
        return
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    print("\nüóÑÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î...")
    if not await apply_database_migrations():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–µ—à–∞
    print("\nüíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–µ—à–∞...")
    if not await setup_cache():
        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∞")
        return
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    await run_performance_test()
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
    print_summary()


if __name__ == "__main__":
    asyncio.run(main()) 