#!/bin/bash
set -euo pipefail

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/production_checklist.sh

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
print_status() {
    local status="$1"
    local message="$2"
    if [[ "$status" == "OK" ]]; then
        echo -e "${GREEN}‚úÖ $message${NC}"
    elif [[ "$status" == "WARNING" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è $message${NC}"
    else
        echo -e "${RED}‚ùå $message${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤
check_file_exists() {
    local file="$1"
    local description="$2"
    if [[ -f "$file" ]]; then
        print_status "OK" "$description"
    else
        print_status "ERROR" "$description (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_env_variable() {
    local var="$1"
    local description="$2"
    if grep -q "^${var}=" .env 2>/dev/null; then
        print_status "OK" "$description"
    else
        print_status "WARNING" "$description (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ
check_secrets_in_code() {
    echo "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ–¥–µ
    if grep -r "BOT_TOKEN\|TELEGRAM_TOKEN" app/ --exclude-dir=__pycache__ 2>/dev/null | grep -v "env\|config"; then
        print_status "ERROR" "–ù–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–¥–µ"
    else
        print_status "OK" "–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–¥–µ"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–æ–ª–µ–π –≤ –∫–æ–¥–µ
    if grep -r "password\|secret" app/ --exclude-dir=__pycache__ 2>/dev/null | grep -v "env\|config\|hash"; then
        print_status "ERROR" "–ù–∞–π–¥–µ–Ω—ã –ø–∞—Ä–æ–ª–∏ –≤ –∫–æ–¥–µ"
    else
        print_status "OK" "–ü–∞—Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–¥–µ"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ .gitignore
check_gitignore() {
    echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore..."

    if grep -q "\.env" .gitignore; then
        print_status "OK" ".env –≤ .gitignore"
    else
        print_status "ERROR" ".env –Ω–µ –≤ .gitignore"
    fi

    if grep -q "__pycache__" .gitignore; then
        print_status "OK" "__pycache__ –≤ .gitignore"
    else
        print_status "WARNING" "__pycache__ –Ω–µ –≤ .gitignore"
    fi

    if grep -q "venv" .gitignore; then
        print_status "OK" "venv –≤ .gitignore"
    else
        print_status "WARNING" "venv –Ω–µ –≤ .gitignore"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_configuration() {
    echo "‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    check_env_variable "TELEGRAM_TOKEN" "TELEGRAM_TOKEN"
    check_env_variable "POSTGRES_PASSWORD" "POSTGRES_PASSWORD"
    check_env_variable "POSTGRES_DB" "POSTGRES_DB"
    check_env_variable "POSTGRES_USER" "POSTGRES_USER"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    check_env_variable "GLITCHTIP_DSN" "GLITCHTIP_DSN (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    check_env_variable "TELEGRAM_BOT_TOKEN" "TELEGRAM_BOT_TOKEN (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    check_env_variable "TELEGRAM_CHAT_ID" "TELEGRAM_CHAT_ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π
check_migrations() {
    echo "üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π..."

    if [[ -d "alembic/versions" ]]; then
        local migration_count=$(ls alembic/versions/*.py 2>/dev/null | wc -l)
        if [[ $migration_count -gt 0 ]]; then
            print_status "OK" "–ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã ($migration_count —Ñ–∞–π–ª–æ–≤)"
        else
            print_status "WARNING" "–ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞"
        fi
    else
        print_status "ERROR" "–ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi

    if [[ -f "alembic.ini" ]]; then
        print_status "OK" "alembic.ini –Ω–∞–π–¥–µ–Ω"
    else
        print_status "ERROR" "alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤
check_tests() {
    echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤..."

    if [[ -d "tests" ]]; then
        local test_count=$(find tests -name "test_*.py" | wc -l)
        if [[ $test_count -gt 0 ]]; then
            print_status "OK" "–¢–µ—Å—Ç—ã –Ω–∞–π–¥–µ–Ω—ã ($test_count —Ñ–∞–π–ª–æ–≤)"
        else
            print_status "WARNING" "–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        print_status "ERROR" "–ü–∞–ø–∫–∞ tests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    check_file_exists "tests/test_security.py" "–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    check_file_exists "tests/test_basic.py" "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
check_documentation() {
    echo "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."

    check_file_exists "README.md" "README.md"
    check_file_exists "LICENSE" "LICENSE"
    check_file_exists "CHANGELOG.md" "CHANGELOG.md"
    check_file_exists "SECURITY.md" "SECURITY.md"
    check_file_exists "DEVOPS_GUIDE.md" "DEVOPS_GUIDE.md"
    check_file_exists "QUICK_START.md" "QUICK_START.md"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
check_monitoring() {
    echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."

    check_file_exists "docker-compose.yml" "docker-compose.yml"
    check_file_exists "prometheus/prometheus.yml" "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Prometheus"
    check_file_exists "prometheus/rules.yml" "–ü—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤"
    check_file_exists "alertmanager/alertmanager.yml" "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alertmanager"
    check_file_exists "grafana/provisioning/dashboards/dashboards.yml" "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Grafana"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
check_scripts() {
    echo "üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤..."

    check_file_exists "scripts/deploy.sh" "–°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è"
    check_file_exists "scripts/backup.sh" "–°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞"
    check_file_exists "scripts/restore.sh" "–°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
    check_file_exists "scripts/init_monitoring.sh" "–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    check_file_exists "scripts/scale.sh" "–°–∫—Ä–∏–ø—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç–æ–≤
    if [[ -x "scripts/deploy.sh" ]]; then
        print_status "OK" "–°–∫—Ä–∏–ø—Ç deploy.sh –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    else
        print_status "WARNING" "–°–∫—Ä–∏–ø—Ç deploy.sh –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
check_demo_data() {
    echo "üé≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö..."

    if grep -r "teacher\|student\|admin" scripts/init_demo.py 2>/dev/null; then
        print_status "WARNING" "–î–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏"
        echo "   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º"
    else
        print_status "OK" "–î–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
check_performance() {
    echo "‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ health check
    if grep -r "health" app/health.py 2>/dev/null; then
        print_status "OK" "Health check —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"
    else
        print_status "WARNING" "Health check –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç—Ä–∏–∫
    if grep -r "prometheus" app/middlewares/metrics.py 2>/dev/null; then
        print_status "OK" "–ú–µ—Ç—Ä–∏–∫–∏ Prometheus –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    else
        print_status "WARNING" "–ú–µ—Ç—Ä–∏–∫–∏ Prometheus –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
check_security() {
    echo "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF –∑–∞—â–∏—Ç—É
    if grep -r "csrf" app/utils/csrf.py 2>/dev/null; then
        print_status "OK" "CSRF –∑–∞—â–∏—Ç–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"
    else
        print_status "WARNING" "CSRF –∑–∞—â–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if grep -r "rate.*limit" app/middlewares/ 2>/dev/null; then
        print_status "OK" "Rate limiting –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        print_status "WARNING" "Rate limiting –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤–≤–æ–¥–∞
    if grep -r "pydantic\|validation" app/ 2>/dev/null; then
        print_status "OK" "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    else
        print_status "WARNING" "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
final_assessment() {
    echo ""
    echo "üìã –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É:"
    echo ""

    local total_checks=0
    local passed_checks=0
    local warnings=0
    local errors=0

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    if [[ -f ".env" ]]; then ((passed_checks++)); else ((errors++)); fi
    ((total_checks++))

    if [[ -f "docker-compose.yml" ]]; then ((passed_checks++)); else ((errors++)); fi
    ((total_checks++))

    if [[ -d "tests" ]]; then ((passed_checks++)); else ((warnings++)); fi
    ((total_checks++))

    if [[ -f "LICENSE" ]]; then ((passed_checks++)); else ((warnings++)); fi
    ((total_checks++))

    if [[ -f "README.md" ]]; then ((passed_checks++)); else ((warnings++)); fi
    ((total_checks++))

    local success_rate=$((passed_checks * 100 / total_checks))

    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
    echo "   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $total_checks"
    echo "   –£—Å–ø–µ—à–Ω–æ: $passed_checks"
    echo "   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $warnings"
    echo "   –û—à–∏–±–∫–∏: $errors"
    echo "   –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: $success_rate%"

    if [[ $success_rate -ge 90 ]]; then
        print_status "OK" "–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É! üéâ"
    elif [[ $success_rate -ge 70 ]]; then
        print_status "WARNING" "–ü—Ä–æ–µ–∫—Ç –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞"
    else
        print_status "ERROR" "–ü—Ä–æ–µ–∫—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
show_recommendations() {
    echo ""
    echo "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:"
    echo ""
    echo "1. üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:"
    echo "   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ HTTPS –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"
    echo "   ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ firewall –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    echo ""
    echo "2. üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –≤ Telegram"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥—ã Grafana"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo ""
    echo "3. üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:"
    echo "   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º"
    echo "   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –±—ç–∫–∞–ø—ã"
    echo ""
    echo "4. üöÄ –î–µ–ø–ª–æ–π:"
    echo "   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ staging –æ–∫—Ä—É–∂–µ–Ω–∏–∏"
    echo "   ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CI/CD pipeline"
    echo ""
    echo "5. üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"
    echo "   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ Wiki –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"
    echo "   ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ runbook –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    echo "üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É..."
    echo ""

    check_secrets_in_code
    check_gitignore
    check_configuration
    check_migrations
    check_tests
    check_documentation
    check_monitoring
    check_scripts
    check_demo_data
    check_performance
    check_security

    final_assessment
    show_recommendations

    echo ""
    echo "üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏"
    echo "2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
    echo "3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ staging –æ–∫—Ä—É–∂–µ–Ω–∏–∏"
    echo "4. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω –¥–µ–ø–ª–æ—è"
    echo "5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
main "$@"
