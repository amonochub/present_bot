#!/bin/bash
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è SchoolBot

set -e

echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è SchoolBot"
echo "================================="

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEPLOY_DIR="${DEPLOY_DIR:-/opt/schoolbot}"
LOG_FILE="${LOG_FILE:-/var/log/schoolbot/monitor.log}"
ALERT_EMAIL="${ALERT_EMAIL:-admin@example.com}"
TELEGRAM_CHAT_ID="${TELEGRAM_CHAT_ID:-}"
TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN:-}"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
error() {
    echo -e "${RED}‚ùå $1${NC}"
    log_message "ERROR" "$1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    log_message "INFO" "$1"
}

info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
    log_message "INFO" "$1"
}

warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    log_message "WARN" "$1"
}

critical() {
    echo -e "${RED}üö® $1${NC}"
    log_message "CRITICAL" "$1"
    send_alert "CRITICAL" "$1"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_message() {
    local level="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] $message" >> "$LOG_FILE"
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
send_alert() {
    local level="$1"
    local message="$2"
    
    # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if [[ -n "$TELEGRAM_BOT_TOKEN" ]] && [[ -n "$TELEGRAM_CHAT_ID" ]]; then
        local telegram_message="üö® SchoolBot Alert [$level]
        
üìÖ –í—Ä–µ–º—è: $(date)
üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: $(hostname)
üìç –°–æ–æ–±—â–µ–Ω–∏–µ: $message

#schoolbot #alert #$level"
        
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$telegram_message" \
            -d parse_mode="HTML" &>/dev/null || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    fi
    
    # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω mail)
    if command -v mail &> /dev/null && [[ -n "$ALERT_EMAIL" ]]; then
        echo "SchoolBot Alert [$level] - $(date)

–°–µ—Ä–≤–µ—Ä: $(hostname)
–°–æ–æ–±—â–µ–Ω–∏–µ: $message

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: docker compose ps
–õ–æ–≥–∏: docker compose logs --tail=50" | mail -s "SchoolBot Alert [$level]" "$ALERT_EMAIL" &>/dev/null || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -h, --help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  -d, --dir DIR           –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    echo "  -c, --continuous        –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    echo "  -i, --interval SEC      –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60)"
    echo "  --check-docker          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo "  --check-health          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ health endpoints"
    echo "  --check-resources       –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"
    echo "  --check-logs            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏"
    echo "  --summary               –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                                    # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
    echo "  $0 -c -i 30                          # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫"
    echo "  $0 --check-docker                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ Docker"
    echo "  $0 --summary                         # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç"
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
CONTINUOUS=false
INTERVAL=60
CHECK_DOCKER_ONLY=false
CHECK_HEALTH_ONLY=false
CHECK_RESOURCES_ONLY=false
CHECK_LOGS_ONLY=false
SUMMARY_ONLY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -d|--dir)
            DEPLOY_DIR="$2"
            shift 2
            ;;
        -c|--continuous)
            CONTINUOUS=true
            shift
            ;;
        -i|--interval)
            INTERVAL="$2"
            shift 2
            ;;
        --check-docker)
            CHECK_DOCKER_ONLY=true
            shift
            ;;
        --check-health)
            CHECK_HEALTH_ONLY=true
            shift
            ;;
        --check-resources)
            CHECK_RESOURCES_ONLY=true
            shift
            ;;
        --check-logs)
            CHECK_LOGS_ONLY=true
            shift
            ;;
        --summary)
            SUMMARY_ONLY=true
            shift
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p "$(dirname "$LOG_FILE")"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_docker_containers() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    if [[ ! -d "$DEPLOY_DIR" ]]; then
        critical "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $DEPLOY_DIR"
        return 1
    fi
    
    cd "$DEPLOY_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è docker-compose.yml
    if [[ ! -f "docker-compose.yml" ]]; then
        critical "–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    local services=$(docker compose config --services)
    local all_healthy=true
    
    for service in $services; do
        local container_status=$(docker compose ps --format json | jq -r ".[] | select(.Service == \"$service\") | .State" 2>/dev/null)
        
        if [[ "$container_status" == "running" ]]; then
            success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service: —Ä–∞–±–æ—Ç–∞–µ—Ç"
        elif [[ "$container_status" == "exited" ]]; then
            critical "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            all_healthy=false
        else
            warn "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ($container_status)"
            all_healthy=false
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health checks
    local unhealthy_containers=$(docker ps --filter "health=unhealthy" --format "{{.Names}}")
    if [[ -n "$unhealthy_containers" ]]; then
        critical "–ù–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: $unhealthy_containers"
        all_healthy=false
    fi
    
    return $([[ "$all_healthy" == true ]] && echo 0 || echo 1)
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoints
check_health_endpoints() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoints..."
    
    local endpoints=(
        "http://localhost:8080/health:Bot Health Check"
    )
    
    local all_healthy=true
    
    for endpoint_info in "${endpoints[@]}"; do
        local endpoint=$(echo "$endpoint_info" | cut -d: -f1)
        local name=$(echo "$endpoint_info" | cut -d: -f2)
        
        if curl -f -s --connect-timeout 10 --max-time 30 "$endpoint" &>/dev/null; then
            success "$name: –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            critical "$name: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($endpoint)"
            all_healthy=false
        fi
    done
    
    return $([[ "$all_healthy" == true ]] && echo 0 || echo 1)
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
check_system_resources() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    local issues_found=false
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
    local disk_usage=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
    if [[ $disk_usage -gt 90 ]]; then
        critical "–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${disk_usage}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
        issues_found=true
    elif [[ $disk_usage -gt 80 ]]; then
        warn "–ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: ${disk_usage}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
    else
        success "–ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: ${disk_usage}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    if command -v free &> /dev/null; then
        local mem_usage=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')
        local mem_available=$(free -h | awk 'NR==2{print $7}')
        
        if (( $(echo "$mem_usage > 90" | bc -l) )); then
            critical "–ú–∞–ª–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: ${mem_usage}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
            issues_found=true
        elif (( $(echo "$mem_usage > 80" | bc -l) )); then
            warn "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: ${mem_usage}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
        else
            success "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: ${mem_usage}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ (–¥–æ—Å—Ç—É–ø–Ω–æ: $mem_available)"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
    if command -v uptime &> /dev/null; then
        local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
        local cpu_cores=$(nproc)
        local load_percentage=$(echo "scale=1; $load_avg * 100 / $cpu_cores" | bc)
        
        if (( $(echo "$load_percentage > 80" | bc -l) )); then
            warn "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: ${load_percentage}% (load average: $load_avg)"
        else
            success "–ó–∞–≥—Ä—É–∑–∫–∞ CPU: ${load_percentage}% (load average: $load_avg)"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤
    if command -v docker &> /dev/null; then
        local docker_disk=$(docker system df --format "table {{.Type}}\t{{.Size}}" | grep "Total" | awk '{print $2}')
        info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker: $docker_disk"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        local unused_images=$(docker images -f "dangling=true" -q | wc -l)
        local unused_volumes=$(docker volume ls -f "dangling=true" -q | wc -l)
        
        if [[ $unused_images -gt 10 ]] || [[ $unused_volumes -gt 5 ]]; then
            warn "–ú–Ω–æ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Docker —Ä–µ—Å—É—Ä—Å–æ–≤ (–æ–±—Ä–∞–∑—ã: $unused_images, —Ç–æ–º–∞: $unused_volumes)"
            info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞: docker system prune -f"
        fi
    fi
    
    return $([[ "$issues_found" == false ]] && echo 0 || echo 1)
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs_for_errors() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏..."
    
    if [[ ! -d "$DEPLOY_DIR" ]]; then
        warn "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
    
    cd "$DEPLOY_DIR"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    local recent_logs=$(docker compose logs --since 5m 2>/dev/null)
    
    # –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    local error_patterns=(
        "ERROR"
        "CRITICAL"
        "FATAL"
        "Exception"
        "Traceback"
        "Failed"
        "Connection refused"
        "Timeout"
    )
    
    local errors_found=false
    
    for pattern in "${error_patterns[@]}"; do
        local error_count=$(echo "$recent_logs" | grep -c "$pattern" || true)
        if [[ $error_count -gt 0 ]]; then
            warn "–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º '$pattern': $error_count"
            errors_found=true
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ SchoolBot
    local bot_errors=$(echo "$recent_logs" | grep -E "(telegram.*error|database.*error|redis.*error)" -i || true)
    if [[ -n "$bot_errors" ]]; then
        critical "–ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞:"
        echo "$bot_errors" | head -5
        errors_found=true
    fi
    
    if [[ "$errors_found" == false ]]; then
        success "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    return $([[ "$errors_found" == false ]] && echo 0 || echo 1)
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    cd "$DEPLOY_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    if docker compose exec -T postgres pg_isready -U schoolbot &>/dev/null; then
        success "PostgreSQL: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
    else
        critical "PostgreSQL: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    local table_count=$(docker compose exec -T postgres psql -U schoolbot -d schoolbot -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null | tr -d ' ')
    
    if [[ $table_count -gt 0 ]]; then
        success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–∞–π–¥–µ–Ω–æ $table_count —Ç–∞–±–ª–∏—Ü"
    else
        critical "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
check_redis() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis..."
    
    cd "$DEPLOY_DIR"
    
    if docker compose exec -T redis redis-cli ping &>/dev/null; then
        success "Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        local redis_memory=$(docker compose exec -T redis redis-cli info memory | grep "used_memory_human" | cut -d: -f2 | tr -d '\r')
        info "Redis –ø–∞–º—è—Ç—å: $redis_memory"
    else
        critical "Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        return 1
    fi
    
    return 0
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
generate_summary() {
    echo ""
    echo -e "${PURPLE}üìã –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SchoolBot${NC}"
    echo "========================================"
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    echo -e "${BLUE}‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞:${NC} $(uptime -p)"
    
    # –í–µ—Ä—Å–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    if [[ -d "$DEPLOY_DIR/.git" ]]; then
        cd "$DEPLOY_DIR"
        local current_commit=$(git rev-parse --short HEAD)
        local last_update=$(git log -1 --format="%cr")
        echo -e "${BLUE}üì¶ –í–µ—Ä—Å–∏—è:${NC} $current_commit (–æ–±–Ω–æ–≤–ª–µ–Ω–æ $last_update)"
    fi
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    echo -e "${BLUE}üê≥ Docker —Å–µ—Ä–≤–∏—Å—ã:${NC}"
    if [[ -d "$DEPLOY_DIR" ]] && [[ -f "$DEPLOY_DIR/docker-compose.yml" ]]; then
        cd "$DEPLOY_DIR"
        docker compose ps --format "table {{.Service}}\t{{.State}}\t{{.Status}}"
    fi
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    echo -e "${BLUE}üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:${NC}"
    local disk_usage=$(df / | awk 'NR==2 {print $5}')
    echo "  –î–∏—Å–∫: $disk_usage –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
    
    if command -v free &> /dev/null; then
        local mem_usage=$(free | awk 'NR==2{printf "%.1f%%", $3*100/$2}')
        echo "  RAM: $mem_usage –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
    fi
    
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    echo "  CPU: load average $load_avg"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
    echo -e "${BLUE}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å):${NC}"
    if [[ -f "$LOG_FILE" ]]; then
        local recent_errors=$(tail -100 "$LOG_FILE" | grep -c "ERROR\|CRITICAL" || echo "0")
        local recent_warnings=$(tail -100 "$LOG_FILE" | grep -c "WARN" || echo "0")
        echo "  –û—à–∏–±–∫–∏: $recent_errors"
        echo "  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $recent_warnings"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
run_monitoring() {
    local overall_status=0
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–æ–≤
    if [[ "$CHECK_DOCKER_ONLY" == true ]]; then
        check_docker_containers || overall_status=1
    elif [[ "$CHECK_HEALTH_ONLY" == true ]]; then
        check_health_endpoints || overall_status=1
    elif [[ "$CHECK_RESOURCES_ONLY" == true ]]; then
        check_system_resources || overall_status=1
    elif [[ "$CHECK_LOGS_ONLY" == true ]]; then
        check_logs_for_errors || overall_status=1
    elif [[ "$SUMMARY_ONLY" == true ]]; then
        generate_summary
        return 0
    else
        # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        check_docker_containers || overall_status=1
        check_database || overall_status=1
        check_redis || overall_status=1
        check_health_endpoints || overall_status=1
        check_system_resources || overall_status=1
        check_logs_for_errors || overall_status=1
    fi
    
    echo ""
    if [[ $overall_status -eq 0 ]]; then
        success "üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    else
        critical "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ!"
    fi
    
    return $overall_status
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_message "INFO" "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (PID: $$)"
    
    if [[ "$CONTINUOUS" == true ]]; then
        info "–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${INTERVAL}—Å)"
        info "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        trap 'info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"; exit 0' SIGINT SIGTERM
        
        while true; do
            echo ""
            echo "$(date): –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏..."
            run_monitoring
            
            echo "–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ${INTERVAL} —Å–µ–∫—É–Ω–¥..."
            sleep "$INTERVAL"
        done
    else
        run_monitoring
        generate_summary
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
