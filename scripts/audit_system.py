#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import subprocess
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any

import aiohttp
import psutil
from sqlalchemy import text

from app.config import settings
from app.db.session import AsyncSessionLocal
from app.services.performance_monitor import get_performance_summary


class SystemAuditor:
    """–ê—É–¥–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    
    def __init__(self):
        self.audit_results = {
            "timestamp": datetime.now().isoformat(),
            "checks": {},
            "recommendations": [],
            "critical_issues": []
        }
    
    async def audit_dependencies(self) -> Dict[str, Any]:
        """–ê—É–¥–∏—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
            result = subprocess.run([
                sys.executable, "-m", "pip", "list", "--outdated"
            ], capture_output=True, text=True)
            
            outdated_packages = []
            if result.stdout:
                for line in result.stdout.strip().split('\n')[2:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if line.strip():
                        parts = line.split()
                        if len(parts) >= 3:
                            outdated_packages.append({
                                "package": parts[0],
                                "current": parts[1],
                                "latest": parts[2]
                            })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_result = subprocess.run([
                sys.executable, "-m", "safety", "check", "--json"
            ], capture_output=True, text=True)
            
            security_issues = []
            if security_result.stdout:
                try:
                    security_data = json.loads(security_result.stdout)
                    security_issues = security_data.get("vulnerabilities", [])
                except json.JSONDecodeError:
                    pass
            
            result = {
                "outdated_packages": outdated_packages,
                "security_issues": security_issues,
                "status": "warning" if outdated_packages or security_issues else "ok"
            }
            
            if outdated_packages:
                self.audit_results["recommendations"].append(
                    f"–û–±–Ω–æ–≤–∏—Ç—å {len(outdated_packages)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤"
                )
            
            if security_issues:
                self.audit_results["critical_issues"].append(
                    f"–ù–∞–π–¥–µ–Ω–æ {len(security_issues)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
                )
            
            print(f"‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {len(outdated_packages)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö, {len(security_issues)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return {"status": "error", "error": str(e)}
    
    async def audit_code_quality(self) -> Dict[str, Any]:
        """–ê—É–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞
            lint_result = subprocess.run([
                sys.executable, "-m", "ruff", "check", "app/", "--output-format=json"
            ], capture_output=True, text=True)
            
            lint_issues = []
            if lint_result.stdout:
                try:
                    lint_data = json.loads(lint_result.stdout)
                    lint_issues = lint_data
                except json.JSONDecodeError:
                    pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
            type_result = subprocess.run([
                sys.executable, "-m", "mypy", "app/", "--json"
            ], capture_output=True, text=True)
            
            type_issues = []
            if type_result.stdout:
                try:
                    type_data = json.loads(type_result.stdout)
                    type_issues = type_data
                except json.JSONDecodeError:
                    pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏
            coverage_result = subprocess.run([
                sys.executable, "-m", "pytest", "--cov=app", "--cov-report=json"
            ], capture_output=True, text=True)
            
            coverage_data = {}
            if coverage_result.returncode == 0:
                try:
                    coverage_data = json.loads(coverage_result.stdout)
                except json.JSONDecodeError:
                    pass
            
            result = {
                "lint_issues": len(lint_issues),
                "type_issues": len(type_issues),
                "coverage": coverage_data.get("totals", {}).get("percent", 0),
                "status": "warning" if lint_issues or type_issues else "ok"
            }
            
            if lint_issues:
                self.audit_results["recommendations"].append(
                    f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å {len(lint_issues)} –ø—Ä–æ–±–ª–µ–º —Å –ª–∏–Ω—Ç–µ—Ä–æ–º"
                )
            
            if type_issues:
                self.audit_results["recommendations"].append(
                    f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å {len(type_issues)} –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏"
                )
            
            if coverage_data.get("totals", {}).get("percent", 0) < 80:
                self.audit_results["recommendations"].append(
                    "–£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ –¥–æ 80%"
                )
            
            print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(lint_issues)} –ª–∏–Ω—Ç–µ—Ä, {len(type_issues)} —Ç–∏–ø—ã, {result['coverage']}% –ø–æ–∫—Ä—ã—Ç–∏–µ")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞: {e}")
            return {"status": "error", "error": str(e)}
    
    async def audit_database(self) -> Dict[str, Any]:
        """–ê—É–¥–∏—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            async with AsyncSessionLocal() as session:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await session.execute(text("SELECT 1"))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ë–î
                size_result = await session.execute(text("""
                    SELECT pg_size_pretty(pg_database_size(current_database())) as size
                """))
                db_size = size_result.scalar()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                slow_queries_result = await session.execute(text("""
                    SELECT query, mean_time, calls 
                    FROM pg_stat_statements 
                    WHERE mean_time > 1000 
                    ORDER BY mean_time DESC 
                    LIMIT 10
                """))
                slow_queries = [{"query": row[0], "mean_time": row[1], "calls": row[2]} 
                               for row in slow_queries_result.fetchall()]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
                indexes_result = await session.execute(text("""
                    SELECT schemaname, tablename, indexname, idx_scan, idx_tup_read, idx_tup_fetch
                    FROM pg_stat_user_indexes 
                    WHERE idx_scan = 0
                """))
                unused_indexes = [{"table": row[1], "index": row[2]} 
                                for row in indexes_result.fetchall()]
                
                result = {
                    "db_size": db_size,
                    "slow_queries": len(slow_queries),
                    "unused_indexes": len(unused_indexes),
                    "status": "warning" if slow_queries or unused_indexes else "ok"
                }
                
                if slow_queries:
                    self.audit_results["recommendations"].append(
                        f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å {len(slow_queries)} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
                    )
                
                if unused_indexes:
                    self.audit_results["recommendations"].append(
                        f"–£–¥–∞–ª–∏—Ç—å {len(unused_indexes)} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"
                    )
                
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —Ä–∞–∑–º–µ—Ä {db_size}, {len(slow_queries)} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
                return result
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return {"status": "error", "error": str(e)}
    
    async def audit_security(self) -> Dict[str, Any]:
        """–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env_vars = {
                "TELEGRAM_TOKEN": bool(settings.TELEGRAM_TOKEN),
                "DB_PASS": len(settings.DB_PASS) >= 8,
                "GLITCHTIP_DSN": bool(settings.GLITCHTIP_DSN),
                "ENV": settings.ENV in ["prod", "staging", "dev"]
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏
            secret_files = [
                ".env",
                "secrets.json",
                "config/secrets.yml"
            ]
            
            exposed_secrets = []
            for file_path in secret_files:
                if Path(file_path).exists():
                    exposed_secrets.append(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
            sensitive_files = [
                ".env",
                "docker-compose.yml",
                "requirements.txt"
            ]
            
            permission_issues = []
            for file_path in sensitive_files:
                if Path(file_path).exists():
                    stat = Path(file_path).stat()
                    if stat.st_mode & 0o777 != 0o600:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                        permission_issues.append(file_path)
            
            result = {
                "env_vars_secure": all(env_vars.values()),
                "exposed_secrets": len(exposed_secrets),
                "permission_issues": len(permission_issues),
                "status": "warning" if exposed_secrets or permission_issues else "ok"
            }
            
            if exposed_secrets:
                self.audit_results["critical_issues"].append(
                    f"–ù–∞–π–¥–µ–Ω–æ {len(exposed_secrets)} —Ñ–∞–π–ª–æ–≤ —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏"
                )
            
            if permission_issues:
                self.audit_results["recommendations"].append(
                    f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {len(permission_issues)} —Ñ–∞–π–ª–æ–≤"
                )
            
            print(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {len(exposed_secrets)} —Å–µ–∫—Ä–µ—Ç–æ–≤, {len(permission_issues)} –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return {"status": "error", "error": str(e)}
    
    async def audit_performance(self) -> Dict[str, Any]:
        """–ê—É–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_summary = await get_performance_summary()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            system_resources = performance_summary.get("system_resources", {})
            performance_report = performance_summary.get("performance_report", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            cpu_usage = system_resources.get("cpu", {}).get("percent", 0)
            memory_usage = system_resources.get("memory", {}).get("rss_mb", 0)
            error_rate = performance_report.get("error_rate_percent", 0)
            
            issues = []
            if cpu_usage > 80:
                issues.append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {cpu_usage}%")
            
            if memory_usage > 1000:
                issues.append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage}MB")
            
            if error_rate > 5:
                issues.append(f"–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {error_rate}%")
            
            result = {
                "cpu_usage": cpu_usage,
                "memory_usage": memory_usage,
                "error_rate": error_rate,
                "issues": len(issues),
                "status": "warning" if issues else "ok"
            }
            
            if issues:
                for issue in issues:
                    self.audit_results["recommendations"].append(issue)
            
            print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: CPU {cpu_usage}%, –ø–∞–º—è—Ç—å {memory_usage}MB, –æ—à–∏–±–∫–∏ {error_rate}%")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {"status": "error", "error": str(e)}
    
    async def audit_tests(self) -> Dict[str, Any]:
        """–ê—É–¥–∏—Ç —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤...")
        
        try:
            # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
            test_result = subprocess.run([
                sys.executable, "-m", "pytest", "--tb=short", "--json-report"
            ], capture_output=True, text=True)
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            test_data = {}
            if test_result.returncode == 0:
                try:
                    # –ò—â–µ–º JSON –æ—Ç—á–µ—Ç –≤ –≤—ã–≤–æ–¥–µ
                    import re
                    json_match = re.search(r'\{.*\}', test_result.stdout)
                    if json_match:
                        test_data = json.loads(json_match.group())
                except:
                    pass
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_tests = test_data.get("summary", {}).get("total", 0)
            passed_tests = test_data.get("summary", {}).get("passed", 0)
            failed_tests = test_data.get("summary", {}).get("failed", 0)
            
            result = {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": failed_tests,
                "success_rate": (passed_tests / total_tests * 100) if total_tests > 0 else 0,
                "status": "error" if failed_tests > 0 else "ok"
            }
            
            if failed_tests > 0:
                self.audit_results["critical_issues"].append(
                    f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ {failed_tests} —Ç–µ—Å—Ç–æ–≤"
                )
            
            if result["success_rate"] < 95:
                self.audit_results["recommendations"].append(
                    f"–£–≤–µ–ª–∏—á–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ –¥–æ 95% (—Å–µ–π—á–∞—Å {result['success_rate']:.1f}%)"
                )
            
            print(f"‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {passed_tests}/{total_tests} –ø—Ä–æ–π–¥–µ–Ω–æ ({result['success_rate']:.1f}%)")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
            return {"status": "error", "error": str(e)}
    
    async def run_full_audit(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("="*60)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checks = [
            ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", self.audit_dependencies),
            ("–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞", self.audit_code_quality),
            ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.audit_database),
            ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", self.audit_security),
            ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", self.audit_performance),
            ("–¢–µ—Å—Ç—ã", self.audit_tests)
        ]
        
        for check_name, check_func in checks:
            print(f"\n{'='*20} {check_name} {'='*20}")
            try:
                result = await check_func()
                self.audit_results["checks"][check_name] = result
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {check_name}: {e}")
                self.audit_results["checks"][check_name] = {"status": "error", "error": str(e)}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        await self.generate_audit_report()
        
        return self.audit_results
    
    async def generate_audit_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∞—É–¥–∏—Ç–∞"""
        print("\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∞—É–¥–∏—Ç–∞...")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_checks = len(self.audit_results["checks"])
        ok_checks = sum(1 for check in self.audit_results["checks"].values() 
                       if check.get("status") == "ok")
        warning_checks = sum(1 for check in self.audit_results["checks"].values() 
                           if check.get("status") == "warning")
        error_checks = sum(1 for check in self.audit_results["checks"].values() 
                          if check.get("status") == "error")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = f"""
# –û—Ç—á–µ—Ç –∞—É–¥–∏—Ç–∞ —Å–∏—Å—Ç–µ–º—ã SchoolBot

**–î–∞—Ç–∞:** {self.audit_results["timestamp"]}
**–°—Ç–∞—Ç—É—Å:** {'‚úÖ –•–æ—Ä–æ—à–æ' if error_checks == 0 else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è' if warning_checks > 0 else '‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ'}

## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}
- ‚úÖ –£—Å–ø–µ—à–Ω–æ: {ok_checks}
- ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_checks}
- ‚ùå –û—à–∏–±–∫–∏: {error_checks}

## üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
"""
        
        for check_name, check_result in self.audit_results["checks"].items():
            status_emoji = {
                "ok": "‚úÖ",
                "warning": "‚ö†Ô∏è", 
                "error": "‚ùå"
            }.get(check_result.get("status"), "‚ùì")
            
            report += f"\n### {check_name} {status_emoji}\n"
            report += f"- –°—Ç–∞—Ç—É—Å: {check_result.get('status', 'unknown')}\n"
            
            if "error" in check_result:
                report += f"- –û—à–∏–±–∫–∞: {check_result['error']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if check_name == "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏":
                outdated = len(check_result.get("outdated_packages", []))
                security = len(check_result.get("security_issues", []))
                report += f"- –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: {outdated}\n"
                report += f"- –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security}\n"
            
            elif check_name == "–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞":
                lint = check_result.get("lint_issues", 0)
                types = check_result.get("type_issues", 0)
                coverage = check_result.get("coverage", 0)
                report += f"- –ü—Ä–æ–±–ª–µ–º —Å –ª–∏–Ω—Ç–µ—Ä–æ–º: {lint}\n"
                report += f"- –ü—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏: {types}\n"
                report += f"- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: {coverage}%\n"
            
            elif check_name == "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö":
                size = check_result.get("db_size", "N/A")
                slow = check_result.get("slow_queries", 0)
                unused = check_result.get("unused_indexes", 0)
                report += f"- –†–∞–∑–º–µ—Ä –ë–î: {size}\n"
                report += f"- –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {slow}\n"
                report += f"- –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: {unused}\n"
            
            elif check_name == "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å":
                env_secure = check_result.get("env_vars_secure", False)
                secrets = check_result.get("exposed_secrets", 0)
                permissions = check_result.get("permission_issues", 0)
                report += f"- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {'‚úÖ' if env_secure else '‚ùå'}\n"
                report += f"- –≠–∫—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤: {secrets}\n"
                report += f"- –ü—Ä–æ–±–ª–µ–º —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞: {permissions}\n"
            
            elif check_name == "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å":
                cpu = check_result.get("cpu_usage", 0)
                memory = check_result.get("memory_usage", 0)
                errors = check_result.get("error_rate", 0)
                report += f"- CPU: {cpu}%\n"
                report += f"- –ü–∞–º—è—Ç—å: {memory}MB\n"
                report += f"- –û—à–∏–±–∫–∏: {errors}%\n"
            
            elif check_name == "–¢–µ—Å—Ç—ã":
                total = check_result.get("total_tests", 0)
                passed = check_result.get("passed_tests", 0)
                success = check_result.get("success_rate", 0)
                report += f"- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}\n"
                report += f"- –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}\n"
                report += f"- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success:.1f}%\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.audit_results["recommendations"]:
            report += "\n## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            for i, rec in enumerate(self.audit_results["recommendations"], 1):
                report += f"{i}. {rec}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if self.audit_results["critical_issues"]:
            report += "\n## üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
            for i, issue in enumerate(self.audit_results["critical_issues"], 1):
                report += f"{i}. {issue}\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = Path(__file__).parent.parent / f"audit_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(report_file, "w", encoding="utf-8") as f:
            f.write(report)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print(f"\nüìä –°–í–û–î–ö–ê –ê–£–î–ò–¢–ê")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {ok_checks}/{total_checks}")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_checks}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {error_checks}")
        
        if self.audit_results["recommendations"]:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(self.audit_results['recommendations'])}")
        
        if self.audit_results["critical_issues"]:
            print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {len(self.audit_results['critical_issues'])}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    auditor = SystemAuditor()
    results = await auditor.run_full_audit()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    critical_issues = len(results["critical_issues"])
    if critical_issues > 0:
        print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {critical_issues} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
        sys.exit(1)
    else:
        print("\n‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)


if __name__ == "__main__":
    asyncio.run(main()) 