from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select

from app.db.session import AsyncSessionLocal
from app.db.user import User
from app.db.notification import Notification, NotificationStatus
from app.services.notification_service import NotificationService
from app.keyboards.main_menu import menu

router = Router()

class NotificationFSM(StatesGroup):
    settings = State()

@router.message(Command("notifications"))
async def show_notifications(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.tg_id == msg.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = await NotificationService.get_user_notifications(
            user_id=user.id,
            limit=5,
            unread_only=True
        )
        
        if not notifications:
            await msg.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        text = "üîî **–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n\n"
        keyboard = []
        
        for notification in notifications:
            status_icon = "üî¥" if notification.status == NotificationStatus.SENT else "üü¢"
            text += f"{status_icon} **{notification.title}**\n{notification.message}\n\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ" if notification.status == NotificationStatus.SENT else "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ",
                    callback_data=f"notification_read_{notification.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="notification_settings")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await msg.answer(text, parse_mode="Markdown", reply_markup=reply_markup)

@router.callback_query(F.data.startswith("notification_read_"))
async def mark_notification_read(call: CallbackQuery):
    """–û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
    notification_id = int(call.data.split("_")[-1])
    
    success = await NotificationService.mark_as_read(notification_id)
    
    if success:
        await call.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.edit_text(
            call.message.text + "\n\n‚úÖ **–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ**",
            parse_mode="Markdown"
        )
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

@router.callback_query(F.data == "notification_settings")
async def notification_settings(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.tg_id == call.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        status_icon = "‚úÖ" if user.notifications_enabled else "‚ùå"
        email_icon = "‚úÖ" if user.email_notifications else "‚ùå"
        
        text = f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
        text += f"{status_icon} Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
        text += f"{email_icon} Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.email_notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = [
            [
                InlineKeyboardButton(
                    "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if user.notifications_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    callback_data="toggle_notifications"
                )
            ],
            [
                InlineKeyboardButton(
                    "üìß –û—Ç–∫–ª—é—á–∏—Ç—å email" if user.email_notifications else "üìß –í–∫–ª—é—á–∏—Ç—å email",
                    callback_data="toggle_email"
                )
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_notifications")]
        ]
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await call.message.edit_text(text, parse_mode="Markdown", reply_markup=reply_markup)

@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(call: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.tg_id == call.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user.notifications_enabled = not user.notifications_enabled
        await session.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await call.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await notification_settings(call)

@router.callback_query(F.data == "toggle_email")
async def toggle_email_notifications(call: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.tg_id == call.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user.email_notifications = not user.email_notifications
        await session.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.email_notifications else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await call.answer(f"‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await notification_settings(call)

@router.callback_query(F.data == "back_to_notifications")
async def back_to_notifications(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await show_notifications(call.message)

@router.callback_query(F.data == "back_to_main")
async def back_to_main(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.tg_id == call.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            await call.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=menu(user.role, "ru")
            )
        else:
            await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é") 