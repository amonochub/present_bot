import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from sqlalchemy import select

from app.db.enums import Status
from app.db.session import AsyncSessionLocal
from app.db.user import User
from app.keyboards.director import tasks_board
from app.keyboards.main_menu import menu
from app.repositories import stats_repo, task_repo

router = Router()
logger = logging.getLogger(__name__)


# helper ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def me(tg_id: int) -> User | None:
    async with AsyncSessionLocal() as s:
        return await s.scalar(select(User).where(User.tg_id == tg_id))


# /kpi –∫–æ–º–∞–Ω–¥–∞
@router.message(Command("kpi"))
async def kpi_cmd(msg: Message):
    try:
        user = await me(msg.from_user.id)
        if user.role not in ("director", "super"):
            await msg.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É.")
            return

        kpi = await stats_repo.kpi_summary()
        # –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        t_done_pct = kpi["tickets_done"] / kpi["tickets_total"] * 100 if kpi["tickets_total"] else 0
        task_done_pct = kpi["tasks_done"] / kpi["tasks_total"] * 100 if kpi["tasks_total"] else 0

        text = (
            "üìä <b>–®–∫–æ–ª—å–Ω—ã–π KPI-–æ—Ç—á—ë—Ç</b>\n\n"
            f"üìù –ó–∞–º–µ—Ç–æ–∫ —É—á–∏—Ç–µ–ª–µ–π: <b>{kpi['notes_total']}</b>\n"
            f"üõ† –ó–∞—è–≤–∫–∏ IT:       <b>{kpi['tickets_done']}/{kpi['tickets_total']}</b> "
            f"({t_done_pct:.0f} %)\n"
            f"‚è± –ü–æ—Ä—É—á–µ–Ω–∏—è:       <b>{kpi['tasks_done']}/{kpi['tasks_total']}</b> "
            f"({task_done_pct:.0f} %)\n"
            f"‚åõÔ∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:      <b>{kpi['overdue']}</b>\n\n"
            f"üìà <a href='http://localhost:3000'>Grafana –¥–∞—à–±–æ—Ä–¥</a>"
        )
        await msg.answer(text, reply_markup=menu(user.role, "ru", user.theme))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI")


# –∫–Ω–æ–ø–∫–∞ –≤ –¥–µ–º–æ-–º–µ–Ω—é —Ç–æ–∂–µ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å /kpi
@router.callback_query(F.data == "stub", lambda c: c.message.text == "/kpi")
async def stub_kpi(call: CallbackQuery):
    await kpi_cmd(call.message)
    await call.answer()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—É—á–µ–Ω–∏–π
@router.callback_query(F.data == "director_tasks")
async def view_tasks(call: CallbackQuery, lang: str):
    try:
        user = await me(call.from_user.id)
        if user.role not in ("director", "super"):
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        tasks = await task_repo.list_open()
        await call.message.edit_text("‚è± <b>–ü–æ—Ä—É—á–µ–Ω–∏—è</b>", reply_markup=tasks_board(tasks, lang))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—É—á–µ–Ω–∏–π: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ä—É—á–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("task_"))
async def toggle_task(call: CallbackQuery):
    try:
        user = await me(call.from_user.id)
        if user.role not in ("director", "super"):
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        task_id = int(call.data.split("_")[1])
        await task_repo.set_status(task_id, Status.done)
        await call.answer("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        await view_tasks(call, "ru")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ä—É—á–µ–Ω–∏—è: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è KPI
@router.message(Command("kpi_test"))
async def kpi_test(msg: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ KPI –º–µ—Ç—Ä–∏–∫"""
    try:
        user = await me(msg.from_user.id)
        if user.role not in ("director", "super"):
            await msg.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        from app.middlewares.metrics import TASKS_COMPLETED, TASKS_OVERDUE, TASKS_TOTAL

        total = TASKS_TOTAL._value.get()
        done = TASKS_COMPLETED._value.get()
        overdue = TASKS_OVERDUE._value.get()

        text = (
            "üìä <b>–¢–µ–∫—É—â–∏–µ KPI –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
            f"üìã –í—Å–µ–≥–æ –ø–æ—Ä—É—á–µ–Ω–∏–π: <b>{total}</b>\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{done}</b>\n"
            f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: <b>{overdue}</b>\n\n"
            f"üí° –ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥"
        )
        await msg.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ KPI: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫")
