import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from sqlalchemy import select

from app.db.session import AsyncSessionLocal
from app.db.user import User
from app.repositories import psych_repo

router = Router()
logger = logging.getLogger(__name__)


async def get_user_role(tg_id: int) -> str | None:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with AsyncSessionLocal() as s:
        user = await s.scalar(select(User).where(User.tg_id == tg_id))
        return user.role if user else None


# –ø—É–Ω–∫—Ç –º–µ–Ω—é ¬´üÜò –ü—Å–∏—Ö–æ–ª–æ–≥¬ª
@router.callback_query(F.data == "stu_help")
async def ask_help(call: CallbackQuery, lang: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = await get_user_role(call.from_user.id)
    if user_role not in ["student", "super"]:
        await call.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º", show_alert=True)
        return

    await call.message.edit_text(
        "üßë‚Äç‚öïÔ∏è *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å*\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —à–∫–æ–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥.",
        parse_mode="Markdown",
    )
    # FSM –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: –ª—é–±–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–±—Ä–∞—â–µ–Ω–∏–µ
    await call.answer()


# –ª–æ–≤–∏–º —Ç–µ–∫—Å—Ç/voice
@router.message(F.content_type.in_({"voice", "text"}))
async def receive_help(msg: Message, lang: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = await get_user_role(msg.from_user.id)
    if user_role not in ["student", "super"]:
        await msg.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º")
        return

    try:
        if msg.voice or msg.text:
            file_id = msg.voice.file_id if msg.voice else None
            text = msg.text.strip() if msg.text else None
            await psych_repo.create(msg.from_user.id, text, file_id)
            await msg.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!")
        else:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
