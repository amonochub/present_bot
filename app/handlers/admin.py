from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.fsm.state import StatesGroup, State
from typing import Optional
import logging
from app.keyboards.main_menu import menu
from app.repositories import ticket_repo, user_repo, media_repo
from app.services import notifier
from app.roles import ROLES
from app.db.user import User
from app.db.session import AsyncSessionLocal
from app.db.enums import Status
from sqlalchemy import select

router = Router()
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class BroadcastFSM(StatesGroup):
    waiting_text = State()

async def get_user_role(tg_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with AsyncSessionLocal() as s:
        user = await s.scalar(select(User).where(User.tg_id == tg_id))
        return user.role if user else None

def ticket_lines(tickets):
    ico = {Status.open: "üü°", Status.in_progress: "üîµ", Status.done: "üü¢"}
    lines = []
    for t in tickets:
        lines.append(f"{ico[t.status]} <b>#{t.id}</b> ‚Äî {t.title}")
    return "\n".join(lines) or "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫."

@router.callback_query(F.data == "admin_tickets")
async def view_tickets(call: CallbackQuery):
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["admin", "super"]:
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
            
        tickets = await ticket_repo.list_all()
        txt = "üóÇ <b>–ó–∞—è–≤–∫–∏ —É—á–∏—Ç–µ–ª–µ–π</b>\n\n" + ticket_lines(tickets)
        kb = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_tickets")],
            [InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å #", callback_data="mark_done")],
            [InlineKeyboardButton("üîµ –í —Ä–∞–±–æ—Ç—É #", callback_data="mark_prog")],
        ]
        await call.message.edit_text(txt,
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(lambda c: c.data.startswith(("mark_done","mark_prog")))
async def change_status(call: CallbackQuery):
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["admin", "super"]:
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
            
        parts = call.data.split()
        if len(parts) != 2 or not parts[1].isdigit():
            await call.answer("–ü–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
            return
        ticket_id = int(parts[1])
        status = Status.done if call.data.startswith("mark_done") else Status.in_progress
        await ticket_repo.set_status(ticket_id, status)
        await call.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!")
        # –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫
        await view_tickets(call)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞—Å—Å—ã–ª–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –∫–Ω–æ–ø–∫–∞ ¬´üì¢ –†–∞—Å—Å—ã–ª–∫–∞¬ª
@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(call: CallbackQuery, state):
    user_role = await get_user_role(call.from_user.id)
    if user_role not in ["admin", "super"]:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
        
    await state.set_state(BroadcastFSM.waiting_text)
    await call.message.edit_text(
        "üìù <b>–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É—á–∏—Ç–µ–ª—è–º</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.")
    await call.answer()

# –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º
@router.message(BroadcastFSM.waiting_text, F.text)
async def send_broadcast(msg: Message, state):
    try:
        user_role = await get_user_role(msg.from_user.id)
        if user_role not in ["admin", "super"]:
            await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return
            
        await state.clear()
        ids = await user_repo.teacher_ids()
        count = await notifier.broadcast(ids, f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n{msg.text}")
        await msg.answer(f"‚úÖ –†–∞–∑–æ—Å–ª–∞–Ω–æ {count} —É—á–∏—Ç–µ–ª—è–º.", reply_markup=menu("admin"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
        await state.clear()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "admin_media")
async def admin_media(call: CallbackQuery):
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["admin", "super"]:
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
            
        reqs = await media_repo.media_list()
        ico = {Status.open: "üü†", Status.in_progress: "üü°", Status.done: "üü¢"}
        txt = "üé¨ <b>–ó–∞—è–≤–∫–∏ –≤ –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä</b>\n\n" + (
            "\n".join(f"{ico[r.status]} #{r.id} –Ω–∞ {r.event_date:%d.%m} ‚Äî {r.comment}"
                      for r in reqs) or "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        await call.message.edit_text(txt, reply_markup=menu("admin"))
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞-–∑–∞—è–≤–æ–∫: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True) 