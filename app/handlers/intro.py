from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from sqlalchemy import select, update

from app.db.session import AsyncSessionLocal
from app.db.user import User
from app.keyboards.main_menu import menu

router = Router()

# –°–ª–∞–π–¥—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
INTRO_SLIDES = [
    {
        "title": "üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—å",
        "text": "–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –æ —É—á–µ–Ω–∏–∫–∞—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫–∏ –≤ IT-–æ—Ç–¥–µ–ª",
        "icon": "üë©‚Äçüè´",
    },
    {
        "title": "üèõ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
        "text": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ IT, —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–æ–≤—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏",
        "icon": "üèõ",
    },
    {
        "title": "üìà –î–∏—Ä–µ–∫—Ç–æ—Ä",
        "text": "–°–ª–µ–¥–∏—Ç –∑–∞ KPI, –¥–∞–µ—Ç –ø–æ—Ä—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        "icon": "üìà",
    },
    {
        "title": "üë®‚Äçüéì –£—á–µ–Ω–∏–∫",
        "text": "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è, –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —É—á–∏—Ç–µ–ª—é",
        "icon": "üë®‚Äçüéì",
    },
    {
        "title": "üë™ –†–æ–¥–∏—Ç–µ–ª—å",
        "text": "–ó–∞–∫–∞–∑—ã–≤–∞–µ—Ç PDF-—Å–ø—Ä–∞–≤–∫–∏ –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å—é —Ä–µ–±–µ–Ω–∫–∞",
        "icon": "üë™",
    },
    {
        "title": "üßë‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥",
        "text": "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –æ—Ç–º–µ—á–∞–µ—Ç —Ä–µ—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
        "icon": "üßë‚Äç‚öïÔ∏è",
    },
]


class IntroFSM(StatesGroup):
    idx = State()


async def mark_intro_seen(tg_id: int):
    """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"""
    async with AsyncSessionLocal() as s:
        await s.execute(update(User).where(User.tg_id == tg_id).values(seen_intro=True))
        await s.commit()


async def get_user(tg_id: int) -> User:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    async with AsyncSessionLocal() as s:
        result = await s.execute(select(User).where(User.tg_id == tg_id))
        return result.scalar_one_or_none()


async def send_intro_slide(msg: Message, idx: int, lang: str = "ru"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–∞–π–¥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    if idx >= len(INTRO_SLIDES):
        return False

    slide = INTRO_SLIDES[idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ª–∞–π–¥–∞
    text = f"{slide['icon']} <b>{slide['title']}</b>\n\n{slide['text']}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    if idx > 0:
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="intro_prev")])

    if idx < len(INTRO_SLIDES) - 1:
        keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="intro_next")])
    else:
        keyboard.append([InlineKeyboardButton("üöÄ –ì–æ—Ç–æ–≤–æ!", callback_data="intro_done")])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await msg.answer(text, parse_mode="HTML", reply_markup=reply_markup)
    return True


@router.message(Command("start"))
async def start_with_intro(msg: Message, state, lang: str = "ru"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    user = await get_user(msg.from_user.id)

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            tg_id=msg.from_user.id,
            username=msg.from_user.username,
            first_name=msg.from_user.first_name,
            last_name=msg.from_user.last_name,
            role="student",  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ä–æ–ª—å
            seen_intro=False,
        )
        async with AsyncSessionLocal() as s:
            s.add(user)
            await s.commit()

    if not user.seen_intro:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await state.set_state(IntroFSM.idx)
        await state.update_data(idx=0)
        await send_intro_slide(msg, 0, lang)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        await msg.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu(user.role, lang),
        )


@router.callback_query(F.data == "intro_next")
async def intro_next(call: CallbackQuery, state, lang: str = "ru"):
    """–°–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    data = await state.get_data()
    idx = data.get("idx", 0) + 1

    await state.update_data(idx=idx)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª–∞–π–¥
    await send_intro_slide(call.message, idx, lang)
    await call.answer()


@router.callback_query(F.data == "intro_prev")
async def intro_prev(call: CallbackQuery, state, lang: str = "ru"):
    """–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    data = await state.get_data()
    idx = max(0, data.get("idx", 0) - 1)

    await state.update_data(idx=idx)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª–∞–π–¥
    await send_intro_slide(call.message, idx, lang)
    await call.answer()


@router.callback_query(F.data == "intro_done")
async def intro_done(call: CallbackQuery, state, lang: str = "ru"):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    await mark_intro_seen(call.from_user.id)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(call.from_user.id)

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    await call.message.delete()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await call.message.answer(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu(user.role, lang),
    )
    await call.answer()
