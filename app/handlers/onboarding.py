# app/handlers/onboarding.py
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, Message

from app.keyboards.onboarding import get_role_selection_keyboard
from app.roles import ROLES

router = Router()


class OnboardingStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""

    selecting_role = State()
    confirming_role = State()


# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ–ª–µ–π –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
ROLE_IMAGES = {
    "teacher": "onboard_cards_v3/onboard_teacher.png",
    "admin": "onboard_cards_v3/onboard_admin.png",
    "director": "onboard_cards_v3/onboard_director.png",
    "parent": "onboard_cards_v3/onboard_parent.png",
    "student": "onboard_cards_v3/onboard_student.png",
    "psych": "onboard_cards_v3/onboard_psych.png",
}

# –û–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–µ–π –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
ROLE_DESCRIPTIONS = {
    "teacher": {
        "title": "üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—å",
        "description": "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏\n‚Ä¢ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á–µ–Ω–∏–∫–∞–º–∏ –∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏",
    },
    "admin": {
        "title": "üèõ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
        "description": "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
    },
    "director": {
        "title": "üìà –î–∏—Ä–µ–∫—Ç–æ—Ä",
        "description": "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ KPI\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º",
    },
    "parent": {
        "title": "üë™ –†–æ–¥–∏—Ç–µ–ª—å",
        "description": "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π –¥–µ—Ç–µ–π\n‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ–∫\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫\n‚Ä¢ –°–≤—è–∑—å —Å —É—á–∏—Ç–µ–ª—è–º–∏",
    },
    "student": {
        "title": "üë®‚Äçüéì –£—á–µ–Ω–∏–∫",
        "description": "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫\n‚Ä¢ –ó–∞–¥–∞–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É",
    },
    "psych": {
        "title": "üßë‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥",
        "description": "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å",
    },
}


@router.message(Command("onboard"))
async def start_onboarding(message: Message, state: FSMContext, lang: str) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    await state.set_state(OnboardingStates.selecting_role)

    welcome_text = (
        "üéì **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SchoolBot!**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ:\n\n"
        "–ö–∞–∂–¥–∞—è —Ä–æ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —à–∫–æ–ª–µ."
    )

    await message.answer(
        welcome_text, reply_markup=get_role_selection_keyboard(), parse_mode="Markdown"
    )


@router.message(Command("carousel"))
async def show_role_carousel(message: Message, state: FSMContext, lang: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å –≤—Å–µ—Ö —Ä–æ–ª–µ–π"""
    await state.set_state(OnboardingStates.selecting_role)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞—Ä—É—Å–µ–ª—å—é
    await send_role_carousel(message, 0, lang)


async def send_role_carousel(message: Message, current_index: int, lang: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—É—Å–µ–ª—å —Ä–æ–ª–µ–π"""
    roles = list(ROLES.keys())
    if current_index >= len(roles):
        current_index = 0

    role = roles[current_index]
    role_info = ROLE_DESCRIPTIONS[role]

    try:
        image_path = ROLE_IMAGES[role]
        photo = FSInputFile(image_path)

        caption = (
            f"**{role_info['title']}**\n\n"
            f"{role_info['description']}\n\n"
            f"üìÑ {current_index + 1} –∏–∑ {len(roles)}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard_buttons = []

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if len(roles) > 1:
            nav_row.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=f"carousel_{(current_index - 1) % len(roles)}",
                )
            )
            nav_row.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=f"carousel_{(current_index + 1) % len(roles)}",
                )
            )
        keyboard_buttons.append(nav_row)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        keyboard_buttons.append(
            [InlineKeyboardButton(text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å {ROLES[role]}", callback_data=f"role_{role}")]
        )

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏
        keyboard_buttons.append(
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π", callback_data="back_to_roles")]
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await message.answer_photo(
            photo=photo, caption=caption, reply_markup=keyboard, parse_mode="Markdown"
        )

    except Exception:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        caption = (
            f"**{role_info['title']}**\n\n"
            f"{role_info['description']}\n\n"
            f"üìÑ {current_index + 1} –∏–∑ {len(roles)}"
        )

        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard_buttons = []

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if len(roles) > 1:
            nav_row.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=f"carousel_{(current_index - 1) % len(roles)}",
                )
            )
            nav_row.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=f"carousel_{(current_index + 1) % len(roles)}",
                )
            )
        keyboard_buttons.append(nav_row)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        keyboard_buttons.append(
            [InlineKeyboardButton(text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å {ROLES[role]}", callback_data=f"role_{role}")]
        )

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏
        keyboard_buttons.append(
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π", callback_data="back_to_roles")]
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await message.answer(caption, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data.startswith("role_"))
async def handle_role_selection(callback: CallbackQuery, state: FSMContext, lang: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role = callback.data.split("_", 1)[1]

    if role not in ROLES:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å
    await state.update_data(selected_role=role)
    await state.set_state(OnboardingStates.confirming_role)

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
    role_info = ROLE_DESCRIPTIONS[role]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    try:
        image_path = ROLE_IMAGES[role]
        photo = FSInputFile(image_path)

        caption = (
            f"**{role_info['title']}**\n\n"
            f"{role_info['description']}\n\n"
            "‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä —Ä–æ–ª–∏**"
        )

        if callback.message is not None:
            await callback.message.answer_photo(photo=photo, caption=caption, parse_mode="Markdown")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            from app.keyboards.onboarding import get_confirmation_keyboard

            await callback.message.edit_reply_markup(reply_markup=get_confirmation_keyboard(role))

    except Exception:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        caption = (
            f"**{role_info['title']}**\n\n"
            f"{role_info['description']}\n\n"
            "‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä —Ä–æ–ª–∏**"
        )

        if callback.message is not None:
            await callback.message.answer(caption, parse_mode="Markdown")

            from app.keyboards.onboarding import get_confirmation_keyboard

            await callback.message.edit_reply_markup(reply_markup=get_confirmation_keyboard(role))

    await callback.answer()


@router.callback_query(F.data.startswith("confirm_role_"))
async def handle_role_confirmation(callback: CallbackQuery, state: FSMContext, lang: str) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role = callback.data.split("_", 2)[2]

    if role not in ROLES:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    selected_role = data.get("selected_role")

    if selected_role != role:
        await callback.answer("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç", show_alert=True)
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    success_text = (
        f"üéâ **–û—Ç–ª–∏—á–Ω–æ!**\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: **{ROLES[role]}**\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—Ö–æ–¥–∞\n"
        "‚Ä¢ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —á–µ—Ä–µ–∑ /help\n"
        "‚Ä¢ –ü—Ä–æ–π—Ç–∏ —Ç—É—Ä –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º —á–µ—Ä–µ–∑ /tour"
    )

    if callback.message is not None:
        await callback.message.answer(success_text, parse_mode="Markdown")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "back_to_roles")
async def back_to_role_selection(callback: CallbackQuery, state: FSMContext, lang: str) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏"""
    await state.set_state(OnboardingStates.selecting_role)

    if callback.message is not None:
        await callback.message.edit_text(
            "üéì **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:**\n\n"
            "–ö–∞–∂–¥–∞—è —Ä–æ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —à–∫–æ–ª–µ.",
            reply_markup=get_role_selection_keyboard(),
            parse_mode="Markdown",
        )
    await callback.answer()


@router.callback_query(F.data == "start_carousel")
async def handle_start_carousel(callback: CallbackQuery, state: FSMContext, lang: str) -> None:
    """–ó–∞–ø—É—Å–∫ –∫–∞—Ä—É—Å–µ–ª–∏ —Ä–æ–ª–µ–π"""
    if callback.message is not None:
        await send_role_carousel(callback.message, 0, lang)
    await callback.answer()


@router.callback_query(F.data.startswith("carousel_"))
async def handle_carousel_navigation(callback: CallbackQuery, state: FSMContext, lang: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏"""
    try:
        index = int(callback.data.split("_", 1)[1])
        if callback.message is not None:
            await send_role_carousel(callback.message, index, lang)
        await callback.answer()
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("info_"))
async def show_role_info(callback: CallbackQuery, state: FSMContext, lang: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏"""
    role = callback.data.split("_", 1)[1]

    if role not in ROLES:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
        return

    role_info = ROLE_DESCRIPTIONS[role]

    try:
        image_path = ROLE_IMAGES[role]
        photo = FSInputFile(image_path)

        caption = (
            f"**{role_info['title']}**\n\n"
            f"{role_info['description']}\n\n"
            "üí° **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å**"
        )

        if callback.message is not None:
            await callback.message.answer_photo(photo=photo, caption=caption, parse_mode="Markdown")

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–π —Ä–æ–ª–∏
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å: {ROLES[role]}",
                            callback_data=f"role_{role}",
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π",
                            callback_data="back_to_roles",
                        )
                    ],
                ]
            )

            await callback.message.edit_reply_markup(reply_markup=keyboard)

    except Exception:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        caption = (
            f"**{role_info['title']}**\n\n"
            f"{role_info['description']}\n\n"
            "üí° **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å**"
        )

        if callback.message is not None:
            await callback.message.answer(caption, parse_mode="Markdown")

            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å: {ROLES[role]}",
                            callback_data=f"role_{role}",
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π",
                            callback_data="back_to_roles",
                        )
                    ],
                ]
            )

            await callback.message.edit_reply_markup(reply_markup=keyboard)

    await callback.answer()
