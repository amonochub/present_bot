# app/bot.py
import asyncio
import logging.config
import pathlib
import signal
from datetime import date, timedelta
from typing import Any

import redis.asyncio as redis
import sentry_sdk
import yaml
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import CallbackQuery, Message
from sentry_sdk.integrations.aiohttp import AioHttpIntegration
from sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration
from sqlalchemy import select, update

from app.config import settings
from app.db.base import Base
from app.db.broadcast import Broadcast
from app.db.media_request import MediaRequest
from app.db.note import Note
from app.db.psych_request import PsychRequest
from app.db.session import AsyncSessionLocal, engine
from app.db.task import Task
from app.db.ticket import Ticket
from app.db.user import User
from app.i18n import t
from app.keyboards.main_menu import menu
from app.middlewares.audit import AuditMiddleware
from app.middlewares.csrf import CSRFMiddleware
from app.middlewares.locale import LocaleMiddleware
from app.middlewares.metrics import MetricsMiddleware
from app.middlewares.rate_limit import RateLimitMiddleware
from app.middlewares.sentry_context import SentryContext
from app.middlewares.ux import FallbackMiddleware, UnknownCommandMiddleware
from app.roles import DEMO_USERS, ROLES
from app.routes import include_all
from app.services.scheduler import kpi_loop
from app.utils.csrf import issue_nonce

# Configure logging
logging.config.dictConfig(yaml.safe_load(pathlib.Path("logging.yml").read_text()))

# Sentry integration


def _should_suppress_event(event: Any, hint: Any) -> bool:
    """Filter out validation errors and rate limits from Sentry"""
    exc = hint.get("exc_info", (None, None, None))[1]
    if exc:
        # Suppress validation errors
        if isinstance(exc, ValueError) and "–ª–æ–≥–∏–Ω" in str(exc).lower():
            return True
        # Suppress rate limit errors
        if "rate" in str(exc).lower() and "limit" in str(exc).lower():
            return True
    return False


# Initialize GlitchTip if DSN is provided
if settings.GLITCHTIP_DSN:
    sentry_sdk.init(
        dsn=settings.GLITCHTIP_DSN,
        integrations=[
            AioHttpIntegration(),
            SqlalchemyIntegration(),
        ],
        traces_sample_rate=0.1,  # 10% of performance transactions
        environment=settings.ENV,
        release="schoolbot@1.0.0",
        # Filter out validation errors and rate limits
        before_send=lambda event, hint: (None if _should_suppress_event(event, hint) else event),
    )

bot = Bot(settings.TELEGRAM_TOKEN)
storage = RedisStorage(redis.from_url(settings.REDIS_URL, decode_responses=True))
dp = Dispatcher(storage=storage)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DB bootstrap ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def init_db() -> None:
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
        result = await conn.execute(select(User))
        if not result.first():
            await conn.execute(User.__table__.insert(), DEMO_USERS)  # type: ignore
            await conn.commit()
        await seed_demo(conn)


async def seed_demo(conn: Any) -> None:
    """
    –ù–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–º–µ—Ä–∞–º–∏, –µ—Å–ª–∏ —Ç–∞–º –ø—É—Å—Ç–æ.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏?
    note_exists = await conn.execute(select(Note.id).limit(1))
    broadcast_exists = await conn.execute(select(Broadcast.id).limit(1))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∑–∞–º–µ—Ç–∫–∏, –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ - —É–∂–µ –∑–∞—Å–µ–≤–∞–ª–∏
    if note_exists.first() and broadcast_exists.first():
        return  # —É–∂–µ –∑–∞—Å–µ–≤–∞–ª–∏

    # –ë–µ—Ä—ë–º id –ø–µ—Ä–≤—ã—Ö –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    teacher1 = 1  # teacher01
    teacher2 = 2  # teacher02
    student2 = 23  # student02
    student3 = 24  # student03

    # --- –∑–∞–º–µ—Ç–∫–∏ —É—á–∏—Ç–µ–ª–µ–π ---
    notes = [
        Note(
            teacher_id=teacher1,
            student_name="–ü–µ—Ç—Ä–æ–≤ –ò–ª—å—è",
            text="–û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ä–æ–∫–µ",
        ),
        Note(
            teacher_id=teacher1,
            student_name="–°–∏–¥–æ—Ä–æ–≤–∞ –ê–Ω–Ω–∞",
            text="–ù–µ —Å–¥–∞–ª–∞ –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É",
        ),
        Note(
            teacher_id=teacher2,
            student_name="–ö–∏–º –î–∞–Ω–∏–∏–ª",
            text="–ü–æ–º–æ–≥ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫—É —Å –∑–∞–¥–∞—á–µ–π",
        ),
    ]

    # --- IT-—Ç–∏–∫–µ—Ç—ã ---
    from app.db.enums import Status

    tickets = [
        Ticket(author_id=teacher1, title="–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–æ–µ–∫—Ç–æ—Ä", status=Status.open),
        Ticket(author_id=teacher2, title="–ù–µ –ø–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä", status=Status.in_progress),
    ]

    # --- –º–µ–¥–∏–∞-–∑–∞—è–≤–∫–∞ ---
    media = [
        MediaRequest(
            author_id=teacher1,
            event_date=date.today() + timedelta(days=7),
            comment="–°—ä—ë–º–∫–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–∞ 5-–≥–æ –∫–ª–∞—Å—Å–∞",
            file_id="demo_file_id",  # –º–æ–∂–Ω–æ –ª—é–±–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            status=Status.open,
        ),
    ]

    # --- –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É ---
    psych = [
        PsychRequest(
            from_id=student2,
            text="–ú–µ–Ω—è –¥—Ä–∞–∑–Ω—è—Ç –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏, –Ω–µ —Ö–æ—á—É –∏–¥—Ç–∏ –≤ —à–∫–æ–ª—É",
            status=Status.open,
        ),
        PsychRequest(
            from_id=student3,
            text="–†—É–≥–∞–ª—Å—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏, —á—É–≤—Å—Ç–≤—É—é —Å—Ç—Ä–µ—Å—Å",
            status=Status.open,
        ),
    ]

    # --- –ø–æ—Ä—É—á–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ ---
    from app.db.task import TaskStatus

    tasks = [
        Task(
            title="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏",
            description="–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü",
            status=TaskStatus.PENDING,
            author_id=1,
            assigned_to_id=teacher1,
            deadline=date.today() + timedelta(days=3),
        ),  # author_id=1 (–¥–∏—Ä–µ–∫—Ç–æ—Ä)
        Task(
            title="–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ú–≠–®",
            description="–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            status=TaskStatus.PENDING,
            author_id=1,
            assigned_to_id=teacher2,
            deadline=date.today() - timedelta(days=1),
        ),  # author_id=1 (–¥–∏—Ä–µ–∫—Ç–æ—Ä) - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
    ]

    # --- –º–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∞ ---
    broadcasts = [
        Broadcast(
            author_id=6,  # admin01
            title="–°–æ–±—Ä–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª–µ–π",
            message=(
                "–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Å–æ–±—Ä–∞–Ω–∏–∏ —É—á–∏—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è –≤ 15:00 "
                "–≤ –∞–∫—Ç–æ–≤–æ–º –∑–∞–ª–µ. –ü–æ–≤–µ—Å—Ç–∫–∞: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–±—Ä–∞–Ω–∏—è–º."
            ),
            target_role="teacher",
            status="delivered",
        ),
    ]

    # Use session for adding objects
    from sqlalchemy.ext.asyncio import AsyncSession
    from sqlalchemy.orm import sessionmaker

    async_session = sessionmaker(
        bind=engine,
        class_=AsyncSession,
        expire_on_commit=False,
    )  # type: ignore

    async with async_session() as session:
        session.add_all(notes + tickets + media + psych + tasks + broadcasts)
        await session.commit()


async def get_user(tg_id: int) -> Any:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        return result.scalar_one_or_none()


async def authenticate(tg_id: int, login: str, pwd: str) -> Any:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.login == login, User.password == pwd, User.used.is_(False))
        )
        user = result.scalar_one_or_none()
        if user:
            user.tg_id = tg_id
            user.used = True
            await session.commit()
        return user


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start & –ª–æ–≥–∏–Ω FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(Command("start"))
async def cmd_start(m: Message, state: FSMContext, lang: str) -> None:
    if m.from_user is None:
        await m.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user = await get_user(m.from_user.id)
    if user:
        await m.answer(
            f"–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ <b>{ROLES[str(user.role)]}</b>",
            reply_markup=menu(str(user.role), lang, str(user.theme)),
        )
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        welcome_text = (
            "üéì **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SchoolBot!**\n\n"
            "–≠—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"
        )

        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üöÄ –ü—Ä–æ–π—Ç–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥", callback_data="start_onboarding"
                    ),
                    InlineKeyboardButton(text="üîë –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", callback_data="start_login"),
                ]
            ]
        )

        await m.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")


@dp.message(F.text)
async def fsm_login(m: Message, state: FSMContext, lang: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ FSM"""
    if m.from_user is None:
        await m.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    current_state = await state.get_state()
    data = await state.get_data()

    if current_state == "await_login":
        if m.text is None:
            await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω.")
            return
        data["login"] = m.text.strip()
        await state.set_state("await_pwd")
        await state.set_data(data)
        await m.answer(t("common.login_prompt", lang))
    elif current_state == "await_pwd":
        if m.text is None:
            await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
            return
        user = await authenticate(m.from_user.id, data["login"], m.text.strip())
        await state.clear()
        if user:
            nonce = await issue_nonce(dp.storage, m.chat.id, m.from_user.id)
            await m.answer(
                t("common.auth_success", lang),
                reply_markup=menu(str(user.role), lang, str(user.theme), nonce),
            )
        else:
            await m.answer(t("common.bad_credentials", lang))
    else:
        await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(F.data == "start_onboarding")
async def handle_start_onboarding(call: CallbackQuery, state: FSMContext, lang: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    from app.handlers.onboarding import start_onboarding

    await start_onboarding(call.message, state, lang)
    await call.answer()


@dp.callback_query(F.data == "start_login")
async def handle_start_login(call: CallbackQuery, state: FSMContext, lang: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    await state.set_state("await_login")
    if call.message is not None and hasattr(call.message, "edit_text"):
        await call.message.edit_text(t("common.start_welcome", lang))
    await call.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(lambda c: c.data.startswith("switch_"))
async def demo_switch(call: CallbackQuery, lang: str) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    if call.from_user is None:
        await call.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if call.data is None:
        await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    role_target = call.data.split("_", 1)[1]  # teacher / admin ...
    user = await get_user(call.from_user.id)
    if not user or user.role != "super":
        await call.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)
        return

    async with AsyncSessionLocal() as s:
        if user is not None and hasattr(user, "id") and user.id is not None:
            await s.execute(update(User).where(User.id == user.id).values(role=role_target))
            await s.commit()
    if call.message is not None and hasattr(call.message, "edit_text"):
        await call.message.edit_text(
            f"üöÄ –í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º ¬´{ROLES[role_target]}¬ª",
            reply_markup=menu(role_target, lang, user.theme),
        )
        await call.answer()
    else:
        await call.answer()
        return
    return


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
include_all(dp)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Middleware ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
dp.message.middleware(LocaleMiddleware())
dp.callback_query.middleware(LocaleMiddleware())
dp.message.middleware(MetricsMiddleware())
dp.callback_query.middleware(MetricsMiddleware())
dp.message.middleware(UnknownCommandMiddleware())
dp.message.middleware(FallbackMiddleware())
dp.message.middleware(RateLimitMiddleware())
dp.callback_query.middleware(CSRFMiddleware())
dp.update.middleware(SentryContext())
dp.update.middleware(AuditMiddleware())


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await init_db()

    # Start health check server
    from aiohttp import web

    from app.health import init_health_app

    health_app = await init_health_app()
    runner = web.AppRunner(health_app)
    await runner.setup()
    site = web.TCPSite(runner, "127.0.0.1", 8080)
    await site.start()

    # Start KPI metrics loop
    asyncio.create_task(kpi_loop())

    # Graceful shutdown setup
    loop = asyncio.get_running_loop()
    stop = asyncio.Event()

    def _sig(*_: Any) -> None:
        stop.set()

    for sig in (signal.SIGTERM, signal.SIGINT):
        loop.add_signal_handler(sig, _sig)

    # Start bot polling
    polling = asyncio.create_task(dp.start_polling(bot, skip_updates=True))
    await stop.wait()
    polling.cancel()
    await bot.session.close()
    await engine.dispose()


if __name__ == "__main__":
    asyncio.run(main())
