"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from app.config import settings
from app.repositories.ticket_repo import create_ticket
from app.repositories.user_repo import get_user


class FeedbackService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""

    def __init__(self, bot: Bot):
        self.bot = bot

    async def start_feedback(
        self, message: Message, state: FSMContext
    ) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç"
        await self.bot.send_chat_action(message.chat.id, "typing")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user(message.from_user.id)

        feedback_text = """
üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
‚Ä¢ üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
‚Ä¢ üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
‚Ä¢ ‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:
        """.strip()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù –û—Ç–∑—ã–≤", callback_data="feedback:type:review"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üêõ –û—à–∏–±–∫–∞", callback_data="feedback:type:bug"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                        callback_data="feedback:type:suggestion",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùì –í–æ–ø—Ä–æ—Å",
                        callback_data="feedback:type:question",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="feedback:cancel"
                    )
                ],
            ]
        )

        await message.answer(
            feedback_text, reply_markup=keyboard, parse_mode="HTML"
        )

        await state.set_state("feedback:type_selection")

    async def handle_feedback_type(
        self, callback: CallbackQuery, state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç"
        await self.bot.send_chat_action(callback.message.chat.id, "typing")

        feedback_type = callback.data.split(":")[2]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        await state.update_data(feedback_type=feedback_type)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        type_messages = {
            "review": "üìù –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –ß—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –∞ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?",
            "bug": "üêõ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏. –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            "suggestion": "üí° –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π –∏–¥–µ–µ —É–ª—É—á—à–µ–Ω–∏—è. –ö–∞–∫ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
            "question": "‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
        }

        instruction = type_messages.get(feedback_type, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç:")

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –û—Ç–º–µ–Ω–∞", callback_data="feedback:cancel"
                    )
                ]
            ]
        )

        await callback.message.edit_text(
            f"{instruction}\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        await state.set_state("feedback:text_input")
        await callback.answer()

    async def handle_feedback_text(
        self, message: Message, state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç"
        await self.bot.send_chat_action(message.chat.id, "typing")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        feedback_type = data.get("feedback_type", "general")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if len(message.text) > 1000:
            await message.answer(
                "‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                parse_mode="HTML",
            )
            return

        # –°–æ–∑–¥–∞—ë–º —Ç–∏–∫–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        user = await get_user(message.from_user.id)

        ticket_data = {
            "title": f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {feedback_type}",
            "description": message.text,
            "author_id": user.id,
            "status": "open",
            "type": "feedback",
            "priority": "normal",
        }

        ticket = await create_ticket(**ticket_data)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = f"""
‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!

üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ.
üÜî –ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{ticket.id}
‚è∞ –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback
        """.strip()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main"
                    )
                ]
            ]
        )

        await message.answer(
            confirmation_text, reply_markup=keyboard, parse_mode="HTML"
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await self._notify_admins(ticket, user)

    async def cancel_feedback(
        self, callback: CallbackQuery, state: FSMContext
    ) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç"
        await self.bot.send_chat_action(callback.message.chat.id, "typing")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        await callback.message.edit_text(
            "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback",
            parse_mode="HTML",
        )

        await callback.answer()

    async def _notify_admins(self, ticket, user) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""

        if not settings.ADMIN_IDS:
            return

        admin_ids = [
            int(admin_id.strip()) for admin_id in settings.ADMIN_IDS.split(",")
        ]

        notification_text = f"""
üì¨ –ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

üë§ –û—Ç: {user.first_name} {user.last_name or ''}
üÜî ID: {user.telegram_id}
üìù –¢–∏–ø: {ticket.title}
üìÑ –¢–µ–∫—Å—Ç: {ticket.description[:200]}{'...' if len(ticket.description) > 200 else ''}
üÜî –¢–∏–∫–µ—Ç: #{ticket.id}
        """.strip()

        for admin_id in admin_ids:
            try:
                await self.bot.send_message(
                    admin_id, notification_text, parse_mode="HTML"
                )
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
feedback_service: FeedbackService = None


def init_feedback_service(bot: Bot) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    global feedback_service
    feedback_service = FeedbackService(bot)
