"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ Telegram –±–æ—Ç–∞
"""

from typing import List, Optional

from aiogram import Bot
from aiogram.types import (
    BotCommand,
    BotCommandScopeChat,
    BotCommandScopeChatAdministrators,
    BotCommandScopeDefault,
)

from app.i18n import t
from app.roles import UserRole


class CommandService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞"""

    def __init__(self, bot: Bot):
        self.bot = bot

    async def setup_commands(self) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        commands = [
            BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="help", description="‚ùì –°–ø—Ä–∞–≤–∫–∞"),
            BotCommand(command="menu", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="feedback", description="üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
            BotCommand(command="theme", description="üåó –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É"),
        ]

        await self.bot.set_my_commands(
            commands, scope=BotCommandScopeDefault()
        )

    async def setup_role_commands(
        self, user_id: int, role: UserRole, lang: str = "ru"
    ) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
        base_commands = [
            BotCommand(command="start", description=t("commands.start", lang)),
            BotCommand(command="help", description=t("commands.help", lang)),
            BotCommand(command="menu", description=t("commands.menu", lang)),
            BotCommand(
                command="feedback", description=t("commands.feedback", lang)
            ),
            BotCommand(command="theme", description=t("commands.theme", lang)),
        ]

        # –†–æ–ª–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        role_commands = self._get_role_commands(role, lang)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        all_commands = base_commands + role_commands

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        scope = BotCommandScopeChat(chat_id=user_id)
        await self.bot.set_my_commands(all_commands, scope=scope)

    def _get_role_commands(
        self, role: UserRole, lang: str
    ) -> List[BotCommand]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏"""

        commands_map = {
            UserRole.STUDENT: [
                BotCommand(
                    command="tasks",
                    description=t("commands.student.tasks", lang),
                ),
                BotCommand(
                    command="notes",
                    description=t("commands.student.notes", lang),
                ),
                BotCommand(
                    command="ask", description=t("commands.student.ask", lang)
                ),
                BotCommand(
                    command="ticket",
                    description=t("commands.student.ticket", lang),
                ),
            ],
            UserRole.TEACHER: [
                BotCommand(
                    command="notes",
                    description=t("commands.teacher.notes", lang),
                ),
                BotCommand(
                    command="addnote",
                    description=t("commands.teacher.addnote", lang),
                ),
                BotCommand(
                    command="ticket",
                    description=t("commands.teacher.ticket", lang),
                ),
                BotCommand(
                    command="students",
                    description=t("commands.teacher.students", lang),
                ),
            ],
            UserRole.PARENT: [
                BotCommand(
                    command="tasks",
                    description=t("commands.parent.tasks", lang),
                ),
                BotCommand(
                    command="cert", description=t("commands.parent.cert", lang)
                ),
                BotCommand(
                    command="progress",
                    description=t("commands.parent.progress", lang),
                ),
                BotCommand(
                    command="ticket",
                    description=t("commands.parent.ticket", lang),
                ),
            ],
            UserRole.PSYCHOLOGIST: [
                BotCommand(
                    command="inbox",
                    description=t("commands.psych.inbox", lang),
                ),
                BotCommand(
                    command="requests",
                    description=t("commands.psych.requests", lang),
                ),
                BotCommand(
                    command="schedule",
                    description=t("commands.psych.schedule", lang),
                ),
            ],
            UserRole.ADMIN: [
                BotCommand(
                    command="tickets",
                    description=t("commands.admin.tickets", lang),
                ),
                BotCommand(
                    command="broadcast",
                    description=t("commands.admin.broadcast", lang),
                ),
                BotCommand(
                    command="users",
                    description=t("commands.admin.users", lang),
                ),
                BotCommand(
                    command="stats",
                    description=t("commands.admin.stats", lang),
                ),
            ],
            UserRole.DIRECTOR: [
                BotCommand(
                    command="kpi", description=t("commands.director.kpi", lang)
                ),
                BotCommand(
                    command="stats",
                    description=t("commands.director.stats", lang),
                ),
                BotCommand(
                    command="reports",
                    description=t("commands.director.reports", lang),
                ),
                BotCommand(
                    command="tasks",
                    description=t("commands.director.tasks", lang),
                ),
            ],
        }

        return commands_map.get(role, [])

    async def clear_user_commands(self, user_id: int) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        scope = BotCommandScopeChat(chat_id=user_id)
        await self.bot.delete_my_commands(scope=scope)

    async def setup_admin_commands(self) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        admin_commands = [
            BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="help", description="‚ùì –°–ø—Ä–∞–≤–∫–∞"),
            BotCommand(command="admin", description="‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
            BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand(command="broadcast", description="üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
            BotCommand(command="users", description="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
            BotCommand(command="tickets", description="üõ† –ó–∞—è–≤–∫–∏"),
        ]

        await self.bot.set_my_commands(
            admin_commands, scope=BotCommandScopeChatAdministrators(chat_id=0)
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
command_service: Optional[CommandService] = None


def init_command_service(bot: Bot) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫–æ–º–∞–Ω–¥"""
    global command_service
    command_service = CommandService(bot)


async def setup_all_commands() -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    if command_service:
        await command_service.setup_commands()
        await command_service.setup_admin_commands()
