from aiogram import F, Router
from aiogram.types import CallbackQuery, Message

from app.i18n import t
from app.keyboards.main_menu import menu
from app.repositories import psych_repo

router = Router()


# —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
@router.callback_query(F.data == "psy_inbox")
async def inbox(call: CallbackQuery, lang: str):
    reqs = await psych_repo.psy_list()
    if not reqs:
        await call.message.edit_text(
            t("psych.requests_empty", lang), reply_markup=menu("psych", lang)
        )
        await call.answer()
        return
    lines = [f"‚Ä¢ #{r.id} ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–µ" if r.content_id else f"‚Ä¢ #{r.id} ‚Äî —Ç–µ–∫—Å—Ç" for r in reqs]
    txt = (
        "üì• <b>–ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è</b>\n\n"
        + "\n".join(lines)
        + "\n\n–í–≤–µ–¥–∏—Ç–µ <code>/take id</code> —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å."
    )
    await call.message.edit_text(txt, reply_markup=menu("psych", lang))
    await call.answer()


# –∫–æ–º–∞–Ω–¥–∞ /take
@router.message(F.text.startswith("/take"))
async def take(msg: Message):
    parts = msg.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: /take 3")
        return
    req_id = int(parts[1])
    reqs = await psych_repo.psy_list()
    req = next((r for r in reqs if r.id == req_id), None)
    if not req:
        await msg.answer("‚õîÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return
    if req.content_id:
        # –≥–æ–ª–æ—Å–æ–≤–æ–µ
        await msg.answer_voice(req.content_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{req.id}")
    if req.text:
        await msg.answer(f"#{req.id} ‚Äî {req.text}")
    await msg.answer("–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ —Ä–µ—à—ë–Ω–Ω—ã–º ‚Äî /done id")


# –∫–æ–º–∞–Ω–¥–∞ /done
@router.message(F.text.startswith("/done"))
async def done(msg: Message, lang: str):
    parts = msg.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: /done 3")
        return
    await psych_repo.mark_done(int(parts[1]))
    await msg.answer("‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω–æ–µ!")
