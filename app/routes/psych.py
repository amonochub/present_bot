import logging
from typing import Any, Optional

from aiogram import F, Router
from aiogram.types import CallbackQuery
from sqlalchemy import select

from app.db.enums import Status
from app.db.session import AsyncSessionLocal
from app.db.user import User
from app.keyboards.main_menu import menu
from app.repositories import psych_repo

router = Router()
logger = logging.getLogger(__name__)


# helper: get current user role
async def get_user_role(tg_id: int) -> Any:
    async with AsyncSessionLocal() as s:
        user = await s.scalar(select(User).where(User.tg_id == tg_id))
        return user.role if user else None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—Ö–æ–¥—è—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "psych_inbox")
async def view_inbox(call: CallbackQuery) -> None:
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["psych", "super"]:
            await call.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É", show_alert=True)
            return

        requests = await psych_repo.list_open()
        if not requests:
            txt = "üì• <b>–í—Ö–æ–¥—è—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è</b>\n\n–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"
        else:
            txt = "üì• <b>–í—Ö–æ–¥—è—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è</b>\n\n" + "\n".join(
                f"üìù <b>#{r.id}</b> ‚Äî {r.text[:100]}{'...' if len(r.text) > 100 else ''}\n"
                f"üë§ –û—Ç: {r.from_id}\n"
                f"üìÖ {r.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                for r in requests
            )
        if call.message is not None:
            await call.message.edit_text(txt, reply_markup=menu("psych", "ru"))
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("psych_mark_done_"))
async def mark_request_done(call: CallbackQuery) -> None:
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["psych", "super"]:
            await call.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É", show_alert=True)
            return

        request_id = int(call.data.split("_")[-1])

        success = await psych_repo.mark_done(request_id)
        if success:
            await call.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
            requests = await psych_repo.list_open()
            if not requests:
                txt = "üì• <b>–í—Ö–æ–¥—è—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è</b>\n\n–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"
            else:
                txt = "üì• <b>–í—Ö–æ–¥—è—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è</b>\n\n" + "\n".join(
                    f"üìù <b>#{r.id}</b> ‚Äî {r.text[:100]}{'...' if len(r.text) > 100 else ''}\n"
                    f"üë§ –û—Ç: {r.from_id}\n"
                    f"üìÖ {r.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    for r in requests
                )
            if call.message is not None:
                await call.message.edit_text(txt, reply_markup=menu("psych", "ru"))
        else:
            await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "psych_stats")
async def view_stats(call: CallbackQuery) -> None:
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["psych", "super"]:
            await call.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—â–µ–Ω–∏–π
        all_requests = await psych_repo.list_all()
        open_requests = [r for r in all_requests if r.status == Status.open]
        done_requests = [r for r in all_requests if r.status == Status.done]

        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π</b>\n\n"
            f"üì• –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {len(all_requests)}\n"
            f"üü° –ù–æ–≤—ã—Ö: {len(open_requests)}\n"
            f"üü¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {len(done_requests)}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(done_requests)/len(all_requests)*100:.1f}%"
            if all_requests
            else "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π</b>\n\n"
            "üì• –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: 0\n"
            "üü° –ù–æ–≤—ã—Ö: 0\n"
            "üü¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: 0\n"
            "üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: 0%"
        )

        if call.message is not None:
            await call.message.edit_text(stats_text, reply_markup=menu("psych", "ru"))
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
