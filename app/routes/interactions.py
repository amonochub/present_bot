"""
–†–æ—É—Ç—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É —Ä–æ–ª—è–º–∏
"""

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.i18n import t
from app.repositories.user_repo import get_user
from app.roles import UserRole
from app.services.notification_service import interaction_service

router = Router()


# === –£–ß–ï–ù–ò–ö ‚Üí –ü–°–ò–•–û–õ–û–ì ===
@router.message(Command("psy_request"))
async def student_psy_request(message: Message, state: FSMContext) -> None:
    """–£—á–µ–Ω–∏–∫ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É"""
    user = await get_user(message.from_user.id)

    if not user or user.role != UserRole.STUDENT:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è
    await state.set_state("psy_request:theme")
    await message.answer(
        "üßë‚Äç‚öïÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É\n\n" "–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ —Ç–µ–º—É –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:", parse_mode="HTML"
    )


@router.message(F.text)
async def handle_psy_request_theme(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É"""
    current_state = await state.get_state()

    if current_state == "psy_request:theme":
        theme = message.text.strip()

        if len(theme) > 200:
            await message.answer("‚ö†Ô∏è –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
        await state.update_data(theme=theme)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª–∞—Å—Å
        await state.set_state("psy_request:classroom")
        await message.answer("üìö –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8–ê, 10–ë):", parse_mode="HTML")


@router.message(F.text)
async def handle_psy_request_classroom(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É"""
    current_state = await state.get_state()

    if current_state == "psy_request:classroom":
        classroom = message.text.strip()

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É
        data = await state.get_data()
        theme = data.get("theme", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        await interaction_service.student_to_psychologist(
            student_id=message.from_user.id, theme=theme, classroom=classroom
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        await message.answer(
            "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É.\n" "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML",
        )


# === –£–ß–ò–¢–ï–õ–¨ ‚Üí –¢–ï–•–ü–û–î–î–ï–†–ñ–ö–ê ===
@router.message(Command("support"))
async def teacher_support_request(message: Message, state: FSMContext) -> None:
    """–£—á–∏—Ç–µ–ª—å –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    user = await get_user(message.from_user.id)

    if not user or user.role != UserRole.TEACHER:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è–º.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞
    await state.set_state("support_request:room")
    await message.answer(
        "üõ† –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n" "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞:", parse_mode="HTML"
    )


@router.message(F.text)
async def handle_support_request_room(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    current_state = await state.get_state()

    if current_state == "support_request:room":
        room = message.text.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞
        await state.update_data(room=room)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        await state.set_state("support_request:description")
        await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:", parse_mode="HTML")


@router.message(F.text)
async def handle_support_request_description(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    current_state = await state.get_state()

    if current_state == "support_request:description":
        description = message.text.strip()

        if len(description) > 500:
            await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞
        data = await state.get_data()
        room = data.get("room", "–Ω–µ —É–∫–∞–∑–∞–Ω")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        await interaction_service.teacher_to_support(
            teacher_id=message.from_user.id, room=room, description=description
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


# === –£–ß–ò–¢–ï–õ–¨ ‚Üí –î–ò–†–ï–ö–¢–û–† ===
@router.message(Command("incident"))
async def teacher_incident_report(message: Message, state: FSMContext) -> None:
    """–£—á–∏—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ"""
    user = await get_user(message.from_user.id)

    if not user or user.role != UserRole.TEACHER:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è–º.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª–∞—Å—Å
    await state.set_state("incident_report:classroom")
    await message.answer(
        "üö® –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ\n\n" "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à—ë–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç:", parse_mode="HTML"
    )


@router.message(F.text)
async def handle_incident_report_classroom(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ"""
    current_state = await state.get_state()

    if current_state == "incident_report:classroom":
        classroom = message.text.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å
        await state.update_data(classroom=classroom)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ—Ä—ã
        await state.set_state("incident_report:measures")
        await message.answer(
            "üìã –û–ø–∏—à–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ—Ä—ã (–±–µ—Å–µ–¥–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Ç.–¥.):", parse_mode="HTML"
        )


@router.message(F.text)
async def handle_incident_report_measures(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ"""
    current_state = await state.get_state()

    if current_state == "incident_report:measures":
        measures = message.text.strip()

        if len(measures) > 300:
            await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–ª–∞—Å—Å
        data = await state.get_data()
        classroom = data.get("classroom", "–Ω–µ —É–∫–∞–∑–∞–Ω")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É
        await interaction_service.teacher_to_director(
            teacher_id=message.from_user.id, classroom=classroom, measures=measures
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


# === –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† ‚Üí –ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê ===
@router.message(Command("broadcast"))
async def admin_broadcast(message: Message, state: FSMContext) -> None:
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–µ–ª–∞–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
    user = await get_user(message.from_user.id)

    if not user or user.role not in [UserRole.ADMIN, UserRole.DIRECTOR]:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    await state.set_state("broadcast:message")
    await message.answer(
        "üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞\n\n" "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", parse_mode="HTML"
    )


@router.message(F.text)
async def handle_broadcast_message(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    current_state = await state.get_state()

    if current_state == "broadcast:message":
        broadcast_text = message.text.strip()

        if len(broadcast_text) > 1000:
            await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await interaction_service.admin_broadcast(
            admin_id=message.from_user.id, message=broadcast_text
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


# === –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† ‚Üí –û–ë–™–Ø–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–Ø ===
@router.message(Command("event"))
async def admin_event_announcement(message: Message, state: FSMContext) -> None:
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—ä—è–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""
    user = await get_user(message.from_user.id)

    if not user or user.role not in [UserRole.ADMIN, UserRole.DIRECTOR]:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
    await state.set_state("event_announcement:date")
    await message.answer(
        "üìÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n\n" "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15 —Å–µ–Ω—Ç—è–±—Ä—è):",
        parse_mode="HTML",
    )


@router.message(F.text)
async def handle_event_announcement_date(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    current_state = await state.get_state()

    if current_state == "event_announcement:date":
        date = message.text.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        await state.update_data(date=date)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        await state.set_state("event_announcement:time")
        await message.answer("üïê –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:30):", parse_mode="HTML")


@router.message(F.text)
async def handle_event_announcement_time(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    current_state = await state.get_state()

    if current_state == "event_announcement:time":
        time = message.text.strip()

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –¥–∞—Ç—É
        data = await state.get_data()
        date = data.get("date", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        await interaction_service.admin_event_announcement(
            admin_id=message.from_user.id, date=date, time=time
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –°–û–ì–õ–ê–°–ò–Ø ===
@router.callback_query(F.data == "consent_yes")
async def handle_consent_yes(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è"""
    await callback.answer(t("psychologist.parent_consent_ok", "ru"), show_alert=True)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    # await interaction_service.psychologist_to_student(...)


@router.callback_query(F.data == "consent_no")
async def handle_consent_no(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ —Ä–æ–¥–∏—Ç–µ–ª—è"""
    await callback.answer(t("psychologist.parent_consent_no", "ru"), show_alert=True)


@router.callback_query(F.data == "confirm_event")
async def handle_confirm_event(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ —Å–æ–±—ã—Ç–∏–∏"""
    await callback.answer(t("admin.event_confirm", "ru"), show_alert=True)
