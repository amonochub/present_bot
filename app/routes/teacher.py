import logging
from datetime import datetime
from typing import Any

from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from sqlalchemy import select

from app.db.session import AsyncSessionLocal
from app.db.user import User
from app.i18n import t
from app.keyboards.main_menu import menu
from app.repositories import media_repo, note_repo, ticket_repo

router = Router()
logger = logging.getLogger(__name__)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class AddNote(StatesGroup):
    waiting_text = State()


class AddTicket(StatesGroup):
    waiting_title = State()
    waiting_file = State()


class MediaFSM(StatesGroup):
    waiting_date = State()
    waiting_file = State()
    waiting_text = State()


# helper: get current user
async def me(tg_id: int) -> Any:
    async with AsyncSessionLocal() as s:
        return await s.scalar(select(User).where(User.tg_id == tg_id))


# 1. —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
@router.callback_query(F.data == "teacher_notes")  # type: ignore[misc]
async def teacher_notes(call: CallbackQuery, lang: str) -> None:
    try:
        user = await me(call.from_user.id)
        if (
            not user
            or not hasattr(user, "role")
            or user.role not in ["teacher", "super"]
        ):
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        if user is not None and hasattr(user, "id") and user.id is not None:
            notes = await note_repo.list_notes(user.id)
        else:
            notes = []
        if not notes:
            txt = t("teacher.notes_empty", lang)
        else:
            txt = "üìù <b>–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏</b>\n\n" + "\n".join(
                f"‚Ä¢ <i>{n.student_name}</i> ‚Äî {n.text} " for n in notes
            )
        if call.message is not None and hasattr(call.message, "edit_text"):
            await call.message.edit_text(
                txt, reply_markup=menu("teacher", lang)
            )
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# 2. –∫–Ω–æ–ø–∫–∞ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É¬ª
@router.callback_query(F.data == "teacher_add")  # type: ignore[misc]
async def start_add(call: CallbackQuery, state: Any, lang: str) -> None:
    try:
        user = await me(call.from_user.id)
        if (
            not user
            or not hasattr(user, "role")
            or user.role not in ["teacher", "super"]
        ):
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        await state.set_state(AddNote.waiting_text)
        if call.message is not None and hasattr(call.message, "edit_text"):
            await call.message.edit_text(t("teacher.add_note_prompt", lang))
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# 3. –ø—Ä–∏—ë–º —Å—Ç—Ä–æ–∫–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@router.message(AddNote.waiting_text, F.text)  # type: ignore[misc]
async def save_note(msg: Message, state: Any, lang: str) -> None:
    try:
        if msg.from_user is None:
            await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        user = await me(msg.from_user.id)
        if (
            not user
            or not hasattr(user, "role")
            or user.role not in ["teacher", "super"]
        ):
            await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        if msg.text is None:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.")
            return
        parts = msg.text.strip().split(maxsplit=2)
        if len(parts) < 2:
            await msg.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ò–º—è —É—á–µ–Ω–∏–∫–∞ –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏</b>",
                parse_mode="HTML",
            )
            return

        student, text = parts[0], " ".join(parts[1:])
        student = " ".join(student.split())  # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤

        if len(text) > 1000:
            await msg.answer(
                "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)"
            )
            return

        if not text.strip():
            await msg.answer("–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        await note_repo.create_note(user.id, student, text)
        await state.clear()
        await msg.answer(
            t("teacher.note_added", lang), reply_markup=menu("teacher", lang)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
        await msg.answer(t("common.error_generic", lang))
        await state.clear()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞—è–≤–∫–∏ IT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "teacher_ticket")  # type: ignore[misc]
async def start_ticket(call: CallbackQuery, state: Any, lang: str) -> None:
    try:
        user = await me(call.from_user.id)
        if (
            not user
            or not hasattr(user, "role")
            or user.role not in ["teacher", "super"]
        ):
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        await state.set_state(AddTicket.waiting_title)
        if call.message is not None and hasattr(call.message, "edit_text"):
            await call.message.edit_text(t("teacher.ticket_text_prompt", lang))
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(AddTicket.waiting_title, F.text)  # type: ignore[misc]
async def ticket_title(msg: Message, state: Any, lang: str) -> None:
    try:
        if msg.text is None:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
            return
        title = msg.text.strip()
        if len(title) > 200:
            await msg.answer(
                "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)"
            )
            return

        if not title:
            await msg.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        await state.update_data(title=title)
        await state.set_state(AddTicket.waiting_file)
        await msg.answer(
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await msg.answer(t("common.error_generic", lang))
        await state.clear()


@router.message(AddTicket.waiting_file, lambda m: m.document or m.photo or m.text)  # type: ignore[misc]
async def ticket_file(msg: Message, state: Any, lang: str) -> None:
    try:
        data = await state.get_data()
        file_id = None

        if msg.text is not None and msg.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            file_id = None
        elif msg.photo:
            file_id = msg.photo[-1].file_id
        elif msg.document:
            file_id = msg.document.file_id
        else:
            await msg.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª"
            )
            return

        if msg.from_user is None:
            await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        user = await me(msg.from_user.id)
        if (
            not user
            or not hasattr(user, "role")
            or user.role not in ["teacher", "super"]
        ):
            await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        ticket = await ticket_repo.create_ticket(
            user.id, data["title"], file_id
        )
        await state.clear()
        await msg.answer(
            t("teacher.ticket_created", lang).format(ticket_id=ticket.id),
            reply_markup=menu("teacher", lang),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–µ–¥–∏–∞-–∑–∞—è–≤–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "teacher_media")  # type: ignore[misc]
async def media_start(call: CallbackQuery, state: Any, lang: str) -> None:
    try:
        user = await me(call.from_user.id)
        if (
            not user
            or not hasattr(user, "role")
            or user.role not in ["teacher", "super"]
        ):
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        await state.set_state(MediaFSM.waiting_date)
        if call.message is not None and hasattr(call.message, "edit_text"):
            await call.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2024):"
            )
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–¥–∏–∞-–∑–∞—è–≤–∫–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(MediaFSM.waiting_date, F.text)  # type: ignore[misc]
async def media_date(msg: Message, state: Any) -> None:
    try:
        if msg.text is None:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
            return
        date_str = msg.text.strip()
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        try:
            datetime.strptime(date_str, "%d.%m.%Y")
        except ValueError:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return

        await state.update_data(date=date_str)
        await state.set_state(MediaFSM.waiting_file)
        await msg.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –º–µ–¥–∏–∞-–∑–∞—è–≤–∫–∏: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.message(MediaFSM.waiting_file, lambda m: m.photo or m.document)  # type: ignore[misc]
async def media_file(msg: Message, state: Any) -> None:
    try:
        file_id = None
        if msg.photo:
            file_id = msg.photo[-1].file_id
        elif msg.document:
            file_id = msg.document.file_id

        await state.update_data(file_id=file_id)
        await state.set_state(MediaFSM.waiting_text)
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –º–µ–¥–∏–∞-–∑–∞—è–≤–∫–∏: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.message(MediaFSM.waiting_text, F.text)  # type: ignore[misc]
async def media_finish(msg: Message, state: Any, lang: str) -> None:
    try:
        data = await state.get_data()
        if msg.from_user is None:
            await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        user = await me(msg.from_user.id)
        if (
            not user
            or not hasattr(user, "role")
            or user.role not in ["teacher", "super"]
        ):
            await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        if msg.text is None:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
            return
        comment = msg.text.strip()
        if len(comment) > 500:
            await msg.answer(
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)"
            )
            return

        await media_repo.create(
            user.id, data["date"], comment, data["file_id"]
        )
        await state.clear()
        await msg.answer(
            "‚úÖ –ú–µ–¥–∏–∞-–∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=menu("teacher", lang)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–¥–∏–∞-–∑–∞—è–≤–∫–∏: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()
