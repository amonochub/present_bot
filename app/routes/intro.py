from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.i18n import t
from app.keyboards.main_menu import menu
from app.repositories.user_repo import get_user, update_user_intro

router = Router()

# –°–ª–∞–π–¥—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
INTRO_SLIDES = [
    {
        "title": "üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—å",
        "text": "–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –æ —É—á–µ–Ω–∏–∫–∞—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫–∏ –≤ IT-–æ—Ç–¥–µ–ª",
        "icon": "üë©‚Äçüè´",
    },
    {
        "title": "üèõ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
        "text": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ IT –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–æ–≤—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏",
        "icon": "üèõ",
    },
    {
        "title": "üìà –î–∏—Ä–µ–∫—Ç–æ—Ä",
        "text": "–°–ª–µ–¥–∏—Ç –∑–∞ KPI, –¥–∞–µ—Ç –ø–æ—Ä—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        "icon": "üìà",
    },
    {
        "title": "üë®‚Äçüéì –£—á–µ–Ω–∏–∫",
        "text": "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è, –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —É—á–∏—Ç–µ–ª—é",
        "icon": "üë®‚Äçüéì",
    },
    {
        "title": "üë™ –†–æ–¥–∏—Ç–µ–ª—å",
        "text": "–ó–∞–∫–∞–∑—ã–≤–∞–µ—Ç PDF-—Å–ø—Ä–∞–≤–∫–∏ –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å—é —Ä–µ–±–µ–Ω–∫–∞",
        "icon": "üë™",
    },
    {
        "title": "üßë‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥",
        "text": "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –≤–µ–¥–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
        "icon": "üßë‚Äç‚öïÔ∏è",
    },
]


async def send_intro_slide(msg: Message, idx: int, lang: str = "ru") -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–∞–π–¥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    slide = INTRO_SLIDES[idx]
    text = f"{slide['icon']} <b>{slide['title']}</b>\n\n{slide['text']}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    if idx > 0:
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="intro_prev")])
    if idx < len(INTRO_SLIDES) - 1:
        keyboard.append([InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="intro_next")])
    else:
        keyboard.append([InlineKeyboardButton(text="üöÄ –ì–æ—Ç–æ–≤–æ!", callback_data="intro_done")])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await msg.answer(text, parse_mode="HTML", reply_markup=reply_markup)


@router.message(Command("start"))
async def start_with_intro(msg: Message, state: FSMContext, lang: str = "ru") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    user = await get_user(msg.from_user.id)

    if not user.seen_intro:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await state.set_state("IntroFSM:idx")
        await state.update_data(idx=0)
        await send_intro_slide(msg, 0, lang)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        await msg.answer(t("common.welcome", lang), reply_markup=menu(user.role, lang))


@router.callback_query(F.data == "intro_next")
async def intro_next(callback: CallbackQuery, state: FSMContext, lang: str = "ru") -> None:
    """–°–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    data = await state.get_data()
    idx = data.get("idx", 0)

    if idx < len(INTRO_SLIDES) - 1:
        if callback.message:
            await callback.message.delete()
        await state.update_data(idx=idx + 1)
        if callback.message:
            await send_intro_slide(callback.message, idx + 1, lang)

    await callback.answer()


@router.callback_query(F.data == "intro_prev")
async def intro_prev(callback: CallbackQuery, state: FSMContext, lang: str = "ru") -> None:
    """–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    data = await state.get_data()
    idx = data.get("idx", 0)

    if idx > 0:
        if callback.message:
            await callback.message.delete()
        await state.update_data(idx=idx - 1)
        if callback.message:
            await send_intro_slide(callback.message, idx - 1, lang)

    await callback.answer()


@router.callback_query(F.data == "intro_done")
async def intro_done(callback: CallbackQuery, state: FSMContext, lang: str = "ru") -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_intro(callback.from_user.id, True)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    user = await get_user(callback.from_user.id)
    if callback.message:
        await callback.message.delete()
        await callback.message.answer(t("common.welcome", lang), reply_markup=menu(user.role, lang))

    await callback.answer()
