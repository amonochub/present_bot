import logging
from typing import Optional

from aiogram import F, Router
from aiogram.types import CallbackQuery
from sqlalchemy import select

from app.db.session import AsyncSessionLocal
from app.db.user import User
from app.keyboards.main_menu import menu
from app.repositories import task_repo
from app.services.pdf_factory import generate_certificate

router = Router()
logger = logging.getLogger(__name__)


# helper: get current user role
async def get_user_role(tg_id: int) -> Optional[str]:
    async with AsyncSessionLocal() as s:
        user = await s.scalar(select(User).where(User.tg_id == tg_id))
        return user.role if user else None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–¥–∞–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "parent_tasks")
async def view_child_tasks(call: CallbackQuery):
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["parent", "super"]:
            await call.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º", show_alert=True)
            return

        tasks = await task_repo.list_open()
        if not tasks:
            txt = "üìö <b>–ó–∞–¥–∞–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"
        else:
            txt = "üìö <b>–ó–∞–¥–∞–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞</b>\n\n" + "\n".join(
                f"üìù <b>{t.title}</b>\n"
                f"üìÑ {t.description}\n"
                f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {t.deadline.strftime('%d.%m.%Y') if t.deadline else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                for t in tasks[:3]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞–Ω–∏—è
            )
            if len(tasks) > 3:
                txt += f"\n... –∏ –µ—â–µ {len(tasks) - 3} –∑–∞–¥–∞–Ω–∏–π"

        await call.message.edit_text(txt, reply_markup=menu("parent", "ru"))
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π —Ä–µ–±–µ–Ω–∫–∞: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–ø—Ä–∞–≤–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "parent_cert")
async def request_certificate(call: CallbackQuery):
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["parent", "super"]:
            await call.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º", show_alert=True)
            return

        await call.message.edit_text(
            "üìÑ <b>–ó–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø—Ä–∞–≤–∫–∏:",
            reply_markup=menu("parent", "ru"),
        )
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø—Ä–∞–≤–∫–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "cert_attendance")
async def generate_attendance_cert(call: CallbackQuery):
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["parent", "super"]:
            await call.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º", show_alert=True)
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∫—É –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        pdf_data = await generate_certificate(
            cert_type="attendance",
            student_name="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
            parent_name=call.from_user.full_name,
            date="2024-12-19",
        )

        await call.message.answer_document(
            document=pdf_data,
            caption="üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏\n\n"
            "–°–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ä–∏–∞—Ç.",
        )
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–∫–∏ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–∫–∏", show_alert=True)


@router.callback_query(F.data == "cert_progress")
async def generate_progress_cert(call: CallbackQuery):
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["parent", "super"]:
            await call.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º", show_alert=True)
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∫—É –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
        pdf_data = await generate_certificate(
            cert_type="progress",
            student_name="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
            parent_name=call.from_user.full_name,
            date="2024-12-19",
        )

        await call.message.answer_document(
            document=pdf_data,
            caption="üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏\n\n"
            "–°–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ä–∏–∞—Ç.",
        )
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–∫–∏ –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–∫–∏", show_alert=True)


@router.callback_query(F.data == "cert_behavior")
async def generate_behavior_cert(call: CallbackQuery):
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["parent", "super"]:
            await call.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º", show_alert=True)
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∫—É –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏
        pdf_data = await generate_certificate(
            cert_type="behavior",
            student_name="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
            parent_name=call.from_user.full_name,
            date="2024-12-19",
        )

        await call.message.answer_document(
            document=pdf_data,
            caption="üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏\n\n"
            "–°–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ä–∏–∞—Ç.",
        )
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–∫–∏ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–∫–∏", show_alert=True)
