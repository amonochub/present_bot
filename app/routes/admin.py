import logging
from typing import Any, Optional

from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from sqlalchemy import select

from app.db.enums import Status
from app.db.session import AsyncSessionLocal
from app.db.user import User
from app.keyboards.main_menu import menu
from app.repositories import media_repo, ticket_repo, user_repo
from app.services.notifier import broadcast

router = Router()
logger = logging.getLogger(__name__)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class BroadcastFSM(StatesGroup):
    waiting_text = State()


# helper: get current user
async def get_user_role(tg_id: int) -> Any:
    async with AsyncSessionLocal() as s:
        user = await s.scalar(select(User).where(User.tg_id == tg_id))
        return user.role if user else None


def ticket_lines(tickets: list[Any]) -> str:
    ico = {Status.open: "üü°", Status.in_progress: "üîµ", Status.done: "üü¢"}
    return "\n".join(f"{ico[t.status]} <b>#{t.id}</b> ‚Äî {t.title} " for t in tickets)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞—è–≤–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "admin_tickets")
async def view_tickets(call: CallbackQuery) -> None:
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["admin", "super"]:
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        tickets = await ticket_repo.list_all()
        if not tickets:
            txt = "üìã <b>–ó–∞—è–≤–∫–∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
        else:
            txt = "üìã <b>–ó–∞—è–≤–∫–∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n" + ticket_lines(tickets)
        if call.message is not None and hasattr(call.message, 'edit_text'):
            await call.message.edit_text(txt, reply_markup=menu("admin", "ru"))
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith(("mark_done", "mark_prog")))
async def change_status(call: CallbackQuery) -> None:
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["admin", "super"]:
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        if call.data is None:
            await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        ticket_id = int(call.data.split("_")[-1])
        status = Status.done if call.data.startswith("mark_done") else Status.in_progress

        success = await ticket_repo.set_status(ticket_id, status)
        if success:
            await call.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
            tickets = await ticket_repo.list_all()
            txt = "üìã <b>–ó–∞—è–≤–∫–∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n" + ticket_lines(tickets)
            if call.message is not None and hasattr(call.message, 'edit_text'):
                await call.message.edit_text(txt, reply_markup=menu("admin", "ru"))
        else:
            await call.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–µ–¥–∏–∞-–∑–∞—è–≤–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "admin_media")
async def view_media(call: CallbackQuery) -> None:
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["admin", "super"]:
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        requests = await media_repo.list_all()
        if not requests:
            txt = "üìπ <b>–ó–∞—è–≤–∫–∏ –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä–∞</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
        else:
            ico = {Status.open: "üü°", Status.in_progress: "üîµ", Status.done: "üü¢"}
            txt = "üìπ <b>–ó–∞—è–≤–∫–∏ –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä–∞</b>\n\n" + "\n".join(
                f"{ico[r.status]} <b>#{r.id}</b> ‚Äî {r.comment} " for r in requests
            )
        if call.message is not None and hasattr(call.message, 'edit_text'):
            await call.message.edit_text(txt, reply_markup=menu("admin", "ru"))
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞-–∑–∞—è–≤–æ–∫: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith(("media_done", "media_prog")))
async def change_media_status(call: CallbackQuery) -> None:
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["admin", "super"]:
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        if call.data is None:
            await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        req_id = int(call.data.split("_")[-1])
        status = Status.done if call.data.startswith("media_done") else Status.in_progress

        success = await media_repo.set_status(req_id, status)
        if success:
            await call.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
            requests = await media_repo.list_all()
            ico = {Status.open: "üü°", Status.in_progress: "üîµ", Status.done: "üü¢"}
            txt = "üìπ <b>–ó–∞—è–≤–∫–∏ –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä–∞</b>\n\n" + "\n".join(
                f"{ico[r.status]} <b>#{r.id}</b> ‚Äî {r.comment} " for r in requests
            )
            if call.message is not None and hasattr(call.message, 'edit_text'):
                await call.message.edit_text(txt, reply_markup=menu("admin", "ru"))
        else:
            await call.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–µ–¥–∏–∞-–∑–∞—è–≤–∫–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞—Å—Å—ã–ª–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(call: CallbackQuery, state: Any) -> None:
    try:
        user_role = await get_user_role(call.from_user.id)
        if user_role not in ["admin", "super"]:
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        await state.set_state(BroadcastFSM.waiting_text)
        if call.message is not None and hasattr(call.message, 'edit_text'):
            await call.message.edit_text(
                "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
            )
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(BroadcastFSM.waiting_text, F.text)
async def send_broadcast(msg: Message, state: Any) -> None:
    try:
        user_role = await get_user_role(msg.from_user.id)
        if user_role not in ["admin", "super"]:
            await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        if msg.text is None:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        text = msg.text.strip()
        if len(text) > 4000:
            await msg.answer("–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        if not text:
            await msg.answer("–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —É—á–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        teacher_ids = await user_repo.teacher_ids()

        if not teacher_ids:
            await msg.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        sent_count = await broadcast(teacher_ids, text)

        await state.clear()
        await msg.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(teacher_ids)}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {len(teacher_ids) - sent_count}",
            reply_markup=menu("admin", "ru"),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
