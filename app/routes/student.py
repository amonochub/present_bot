from aiogram import F, Router
from aiogram.types import CallbackQuery, Message

from app.repositories import psych_repo

router = Router()


# –ø—É–Ω–∫—Ç –º–µ–Ω—é ¬´üÜò –ü—Å–∏—Ö–æ–ª–æ–≥¬ª
@router.callback_query(F.data == "stu_help")
async def ask_help(call: CallbackQuery, lang: str):
    await call.message.edit_text(
        "üßë‚Äç‚öïÔ∏è *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å*\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —à–∫–æ–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥.",
        parse_mode="Markdown",
    )
    # FSM –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: –ª—é–±–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–±—Ä–∞—â–µ–Ω–∏–µ
    await call.answer()


# –ª–æ–≤–∏–º —Ç–µ–∫—Å—Ç/voice
@router.message(F.content_type.in_({"voice", "text"}))
async def receive_help(msg: Message, lang: str):
    # –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä;
    # –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å.
    if msg.voice or msg.text:
        file_id = msg.voice.file_id if msg.voice else None
        text = msg.text.strip() if msg.text else None
        await psych_repo.psy_create(msg.from_user.id, text, file_id)
        await msg.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!")
