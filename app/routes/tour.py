from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from sqlalchemy import select

from app.db.session import AsyncSessionLocal
from app.db.user import User
from app.keyboards.main_menu import get_back_btn, menu

router = Router()

TOUR_ROLES = ["teacher", "admin", "director", "student", "parent", "psych"]


class TourFSM(StatesGroup):
    step = State()


async def set_role(tg_id: int, role: str):
    async with AsyncSessionLocal() as s:
        await s.execute(
            select(User)
            .where(User.tg_id == tg_id)
            .execution_options(populate_existing=True)
        )
        user = await s.scalar(select(User).where(User.tg_id == tg_id))
        user.role = role
        await s.commit()


def _tour_text(role: str) -> str:
    mapping = {
        "teacher": "üë©‚Äçüè´ <b>–£—á–∏—Ç–µ–ª—å</b>\n–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫–∏, –∑–∞—è–≤–∫–∏ IT, –∑–∞–ø—Ä–æ—Å—ã –≤ –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä.",
        "admin": "üèõ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n–ö–∞–Ω–±–∞–Ω –∑–∞—è–≤–æ–∫, –º–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —É—á–∏—Ç–µ–ª—è–º.",
        "director": "üìà <b>–î–∏—Ä–µ–∫—Ç–æ—Ä</b>\n–°–º–æ—Ç—Ä–∏—Ç KPI, –¥–∞—ë—Ç –ø–æ—Ä—É—á–µ–Ω–∏—è.",
        "student": "üë®‚Äçüéì <b>–£—á–µ–Ω–∏–∫</b>\n–í–∏–¥–∏—Ç –∑–∞–¥–∞–Ω–∏—è, –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —É—á–∏—Ç–µ–ª—é.",
        "parent": "üë™ <b>–†–æ–¥–∏—Ç–µ–ª—å</b>\n–ó–∞–∫–∞–∑—ã–≤–∞–µ—Ç PDF-—Å–ø—Ä–∞–≤–∫–∏, —Å–ª–µ–¥–∏—Ç –∑–∞ –∑–∞–¥–∞–Ω–∏—è–º–∏.",
        "psych": "üßë‚Äç‚öïÔ∏è <b>–ü—Å–∏—Ö–æ–ª–æ–≥</b>\n–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è, –æ—Ç–º–µ—á–∞–µ—Ç ¬´–†–µ—à–µ–Ω–æ¬ª.",
    }
    return mapping[role]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /tour ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("tour"))
async def start_tour(msg: Message, state, lang: str):
    await state.set_state(TourFSM.step)
    await state.update_data(idx=0)
    await next_step(msg, state, lang)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬´–î–∞–ª—å—à–µ¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(lambda c: c.data == "tour_next")
async def next_cb(call: CallbackQuery, state, lang: str):
    await next_step(call.message, state, lang)
    await call.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_cb(call: CallbackQuery, state, lang: str):
    await state.clear()
    await call.message.edit_text(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –¥–µ–º–æ-–º–µ–Ω—é", reply_markup=menu("super", lang)
    )
    await call.answer()


async def next_step(msg: Message, state, lang: str):
    data = await state.get_data()
    idx = data.get("idx", 0)

    if idx >= len(TOUR_ROLES):
        await state.clear()
        await msg.answer(
            "üöÄ –¢—É—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã —Å–Ω–æ–≤–∞ –≤ –¥–µ–º–æ-–º–µ–Ω—é.", reply_markup=menu("super", lang)
        )
        return

    role = TOUR_ROLES[idx]
    await set_role(msg.from_user.id, role)  # ¬´–ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º¬ª —Ä–æ–ª—å

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏ –º–µ–Ω—é —Ä–æ–ª–∏
    await msg.answer(_tour_text(role), parse_mode="HTML", reply_markup=menu(role, lang))
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª—å—à–µ¬ª
    next_btn = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="tour_next")],
            get_back_btn(),  # –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–π—Ç–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
        ]
    )
    await msg.answer(
        "–ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –ø–æ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª—å—à–µ¬ª ‚Üí", reply_markup=next_btn
    )

    await state.update_data(idx=idx + 1)
