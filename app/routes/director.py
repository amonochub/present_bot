import logging
from typing import Any, Optional

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from sqlalchemy import select

from app.db.enums import Status
from app.db.session import AsyncSessionLocal
from app.db.user import User
from app.keyboards.main_menu import menu
from app.repositories import stats_repo, task_repo

router = Router()
logger = logging.getLogger(__name__)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class AddTask(StatesGroup):
    waiting_title = State()
    waiting_description = State()
    waiting_deadline = State()


# helper: get current user
async def me(tg_id: int) -> Any:
    async with AsyncSessionLocal() as s:
        return await s.scalar(select(User).where(User.tg_id == tg_id))


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ KPI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("kpi"))
async def kpi_cmd(msg: Message) -> None:
    try:
        user = await me(msg.from_user.id)
        if not user or user.role not in ["director", "super"]:
            await msg.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É.")
            return

        stats = await stats_repo.kpi_summary()

        kpi_text = (
            "üìä <b>KPI –û—Ç—á–µ—Ç</b>\n\n"
            f"üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {stats['notes_total']}\n"
            f"üìã <b>–ó–∞—è–≤–∫–∏:</b> {stats['tickets_total']} (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['tickets_done']})\n"
            f"üìã <b>–ó–∞–¥–∞—á–∏:</b> {stats['tasks_total']} (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['tasks_done']})\n"
            f"‚ö†Ô∏è <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:</b> {stats['overdue']}\n\n"
            f"üìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –ó–∞—è–≤–∫–∏: {stats['tickets_done']}/{stats['tickets_total']} "
            f"({stats['tickets_done']/stats['tickets_total']*100:.1f}%)\n"
            f"‚Ä¢ –ó–∞–¥–∞—á–∏: {stats['tasks_done']}/{stats['tasks_total']} "
            f"({stats['tasks_done']/stats['tasks_total']*100:.1f}%)"
        )

        await msg.answer(kpi_text, reply_markup=menu("director", "ru"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–¥–∞—á–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "director_tasks")
async def view_tasks(call: CallbackQuery) -> None:
    try:
        user = await me(call.from_user.id)
        if not user or user.role not in ["director", "super"]:
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        tasks = await task_repo.list_open()
        if not tasks:
            txt = "üìã <b>–ó–∞–¥–∞—á–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
        else:
            ico = {Status.open: "üü°", Status.in_progress: "üîµ", Status.done: "üü¢"}
            txt = "üìã <b>–ó–∞–¥–∞—á–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞</b>\n\n" + "\n".join(
                f"{ico[t.status]} <b>#{t.id}</b> ‚Äî {t.title}\n"  # type: ignore
                f"üìù {t.description}\n"
                f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {t.deadline.strftime('%d.%m.%Y') if t.deadline else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
                for t in tasks
            )
        if call.message is not None and hasattr(call.message, 'edit_text'):
            await call.message.edit_text(txt, reply_markup=menu("director", "ru"))
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "director_add_task")
async def start_add_task(call: CallbackQuery, state: Any) -> None:
    try:
        user = await me(call.from_user.id)
        if not user or user.role not in ["director", "super"]:
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        await state.set_state(AddTask.waiting_title)
        if call.message is not None and hasattr(call.message, 'edit_text'):
            await call.message.edit_text("üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(AddTask.waiting_title, F.text)
async def task_title(msg: Message, state: Any) -> None:
    try:
        if msg.text is None:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
            return
        title = msg.text.strip()
        if len(title) > 200:
            await msg.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        if not title:
            await msg.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        await state.update_data(title=title)
        await state.set_state(AddTask.waiting_description)
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.message(AddTask.waiting_description, F.text)
async def task_description(msg: Message, state: Any) -> None:
    try:
        if msg.text is None:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
            return
        description = msg.text.strip()
        if len(description) > 1000:
            await msg.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        if not description:
            await msg.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        await state.update_data(description=description)
        await state.set_state(AddTask.waiting_deadline)
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ù–µ—Ç¬ª):")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.message(AddTask.waiting_deadline, F.text)
async def task_deadline(msg: Message, state: Any) -> None:
    try:
        if msg.text is None:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω.")
            return
        deadline_text = msg.text.strip()

        if deadline_text.lower() == "–Ω–µ—Ç":
            deadline = None
        else:
            try:
                from datetime import datetime

                deadline = datetime.strptime(deadline_text, "%d.%m.%Y").date()
            except ValueError:
                await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ù–µ—Ç¬ª")
                return

        data = await state.get_data()
        user = await me(msg.from_user.id)
        if not user or user.role not in ["director", "super"]:
            await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        await task_repo.create_task(
            title=data["title"],
            description=data["description"],
            deadline=deadline,
            author_id=user.id,
        )

        await state.clear()
        await msg.answer("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=menu("director", "ru"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        await state.clear()


@router.callback_query(lambda c: c.data.startswith(("task_done", "task_prog")))
async def change_task_status(call: CallbackQuery):
    try:
        user = await me(call.from_user.id)
        if not user or user.role not in ["director", "super"]:
            await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        if call.data is None:
            await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        task_id = int(call.data.split("_")[-1])
        status = Status.done if call.data.startswith("task_done") else Status.in_progress

        success = await task_repo.set_status(task_id, status)
        if success:
            await call.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            tasks = await task_repo.list_open()
            ico = {Status.open: "üü°", Status.in_progress: "üîµ", Status.done: "üü¢"}
            txt = "üìã <b>–ó–∞–¥–∞—á–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞</b>\n\n" + "\n".join(
                f"{ico[t.status]} <b>#{t.id}</b> ‚Äî {t.title}\n"  # type: ignore
                f"üìù {t.description}\n"
                f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {t.deadline.strftime('%d.%m.%Y') if t.deadline else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
                for t in tasks
            )
            if call.message is not None and hasattr(call.message, 'edit_text'):
                await call.message.edit_text(txt, reply_markup=menu("director", "ru"))
        else:
            await call.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
