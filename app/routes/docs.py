"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ Context7
"""

import logging
from typing import List

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    ErrorEvent,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from app.i18n import t
from app.repositories.user_repo import get_user
from app.roles import UserRole
from app.services.news_parser import get_news_cards

router = Router()
logger = logging.getLogger(__name__)


def get_localized_text(key: str, **kwargs) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ Context7"""
    text = t(key)
    if kwargs:
        return text.format(**kwargs)
    return text


@router.errors()
async def error_handler(event: ErrorEvent) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ Context7"""
    logger.error(f"–û—à–∏–±–∫–∞ –≤ docs —Ä–æ—É—Ç–µ—Ä–µ: {event.exception}", exc_info=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if hasattr(event, "update") and hasattr(event.update, "message"):
        try:
            await event.update.message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")


@router.message(Command("docs"))
async def show_docs(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        user = await get_user(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        if not user:
            await message.answer("‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å", callback_data="doc_standard")],
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞", callback_data="doc_pay")],
                [InlineKeyboardButton(text="–°–ª—É–∂–±—ã –ø–æ–º–æ—â–∏", callback_data="doc_help")],
            ]
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ Context7
        text = (
            f"{get_localized_text('docs.list_header')}\n"
            f"{get_localized_text('docs.item_standard')}\n"
            f"{get_localized_text('docs.item_pay')}\n"
            f"{get_localized_text('docs.item_help')}\n\n"
            f"{get_localized_text('docs.reply_footer')}"
        )

        await message.answer(text, reply_markup=kb)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")


@router.callback_query(F.data.startswith("doc_"))
async def send_doc_link(callback: CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç"""
    try:
        doc_map = {
            "doc_standard": {
                "title": "–ü–æ—Ä—è–¥–æ–∫ –æ–∫–∞–∑–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏",
                "description": "–ü—Ä–∏–∫–∞–∑ –î–û–ù–ú ‚Ññ___ –æ –ø–æ—Ä—è–¥–∫–µ –æ–∫–∞–∑–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏ –æ–±—É—á–∞—é—â–∏–º—Å—è",
                "url": "https://www.mos.ru/donm/documents/",
                "file_url": "https://www.mos.ru/donm/documents/order_psych_help.pdf",
            },
            "doc_pay": {
                "title": "–ú–µ—Ç–æ–¥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤",
                "description": "–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ —Ç—Ä—É–¥–∞ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤",
                "url": "https://www.mos.ru/donm/documents/",
                "file_url": "https://www.mos.ru/donm/documents/payment_methodology.pdf",
            },
            "doc_help": {
                "title": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É–∂–±—ã –ø–æ–º–æ—â–∏",
                "description": "–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª—É–∂–±–∞—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏",
                "url": "https://www.dpomos.ru/",
                "file_url": "https://www.dpomos.ru/contacts",
            },
        }

        doc_key = callback.data
        if doc_key in doc_map:
            doc_info = doc_map[doc_key]

            text = (
                f"üìÑ **{doc_info['title']}**\n\n"
                f"{doc_info['description']}\n\n"
                f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç:**\n{doc_info['url']}\n\n"
                f"üìé **–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞:**\n{doc_info['file_url']}"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìÑ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", url=doc_info["url"])],
                    [InlineKeyboardButton(text="üìé –°–∫–∞—á–∞—Ç—å", url=doc_info["file_url"])],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="docs_back")],
                ]
            )

            if callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        else:
            if callback.message and hasattr(callback.message, "answer"):
                await callback.message.answer(get_localized_text("docs.unknown_doc"))

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", show_alert=True)


@router.callback_query(F.data == "docs_back")
async def back_to_docs_list(callback: CallbackQuery) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å", callback_data="doc_standard")],
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞", callback_data="doc_pay")],
                [InlineKeyboardButton(text="–°–ª—É–∂–±—ã –ø–æ–º–æ—â–∏", callback_data="doc_help")],
            ]
        )

        text = (
            f"{get_localized_text('docs.list_header')}\n"
            f"{get_localized_text('docs.item_standard')}\n"
            f"{get_localized_text('docs.item_pay')}\n"
            f"{get_localized_text('docs.item_help')}\n\n"
            f"{get_localized_text('docs.reply_footer')}"
        )

        if callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(Command("news"))
async def show_news(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        user = await get_user(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ—Å—Ç—è–º
        if not user:
            await message.answer("‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤–æ—Å—Ç—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ Context7
        news_cards = await get_news_cards(limit=5)

        if not news_cards:
            await message.answer("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for i, item in enumerate(news_cards, 1):
            text = (
                f"{get_localized_text('news.card_header', title=item['title'])}\n"
                f"{get_localized_text('news.card_date', date=item['date'])}\n"
                f"{get_localized_text('news.card_desc', desc=item['desc'])}"
            )

            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=get_localized_text("news.card_more"), url=item["url"]
                        )
                    ]
                ]
            )

            await message.answer(text, reply_markup=kb)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π
        await message.answer(f"üì∞ –ü–æ–∫–∞–∑–∞–Ω–æ {len(news_cards)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π")


@router.message(Command("announce"))
async def admin_announce(message: Message) -> None:
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤)"""
    try:
        user = await get_user(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user or user.role not in [UserRole.ADMIN, UserRole.DIRECTOR]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            return

        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /announce —Ç–µ–∫—Å—Ç_–æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if message.text is None:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce —Ç–µ–∫—Å—Ç_–æ–±—ä—è–≤–ª–µ–Ω–∏—è")
            return

        announcement_text = message.text.replace("/announce", "").strip()
        if not announcement_text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce —Ç–µ–∫—Å—Ç_–æ–±—ä—è–≤–ª–µ–Ω–∏—è")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ Context7
        url = "https://www.mos.ru/donm/"
        msg = get_localized_text("admin.announcement", announcement=announcement_text, url=url)

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
        await message.answer(f"üì¢ **–û–§–ò–¶–ò–ê–õ–¨–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï**\n\n{msg}", parse_mode="HTML")

        await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")


def get_recipients(role: str = "all") -> List[int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return [123456, 7891011]  # –ü—Ä–∏–º–µ—Ä user_id
