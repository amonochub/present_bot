#!/usr/bin/env python3
import asyncio
from unittest.mock import AsyncMock, MagicMock

from app.bot import demo_switch


async def test_demo_switch():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é demo_switch"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ demo_switch:")

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        mock_user = MagicMock()
        mock_user.id = 123456

        mock_call = AsyncMock()
        mock_call.from_user = mock_user
        mock_call.data = "switch_super"  # –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç CSRF middleware

        mock_message = MagicMock()
        mock_message.chat.id = 789
        mock_message.edit_text = AsyncMock()
        mock_call.message = mock_message

        # –°–∏–º—É–ª–∏—Ä—É–µ–º get_user

        mock_db_user = MagicMock()
        mock_db_user.id = 1
        mock_db_user.login = "demo01"
        mock_db_user.role = "psych"
        mock_db_user.theme = "light"

        # –ü–∞—Ç—á–∏–º get_user
        import app.bot

        original_get_user = app.bot.get_user
        app.bot.get_user = AsyncMock(return_value=mock_db_user)

        # –ü–∞—Ç—á–∏–º issue_nonce
        original_issue_nonce = app.bot.issue_nonce
        app.bot.issue_nonce = AsyncMock(return_value="new_nonce")

        # –ü–∞—Ç—á–∏–º AsyncSessionLocal
        original_AsyncSessionLocal = app.bot.AsyncSessionLocal
        mock_session = AsyncMock()
        mock_session.__aenter__ = AsyncMock(return_value=mock_session)
        mock_session.__aexit__ = AsyncMock(return_value=None)
        mock_session.execute = AsyncMock()
        mock_session.commit = AsyncMock()
        app.bot.AsyncSessionLocal = MagicMock(return_value=mock_session)

        # –ü–∞—Ç—á–∏–º ROLES
        original_ROLES = app.bot.ROLES
        app.bot.ROLES = {"super": "–î–µ–º–æ-—Ä–µ–∂–∏–º"}

        # –ü–∞—Ç—á–∏–º menu
        original_menu = app.bot.menu
        app.bot.menu = MagicMock(return_value="mock_markup")

        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            await demo_switch(mock_call, "ru")

            print("   ‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫")
            print("   üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã:")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ edit_text –±—ã–ª –≤—ã–∑–≤–∞–Ω
            if mock_message.edit_text.called:
                print("   ‚úÖ edit_text –±—ã–ª –≤—ã–∑–≤–∞–Ω")
                call_args = mock_message.edit_text.call_args
                print(f"   üìù –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {call_args}")
            else:
                print("   ‚ùå edit_text –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ issue_nonce –±—ã–ª –≤—ã–∑–≤–∞–Ω
            if app.bot.issue_nonce.called:
                print("   ‚úÖ issue_nonce –±—ã–ª –≤—ã–∑–≤–∞–Ω")
            else:
                print("   ‚ùå issue_nonce –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ menu –±—ã–ª –≤—ã–∑–≤–∞–Ω
            if app.bot.menu.called:
                print("   ‚úÖ menu –±—ã–ª –≤—ã–∑–≤–∞–Ω")
                menu_args = app.bot.menu.call_args
                print(f"   üìù –ê—Ä–≥—É–º–µ–Ω—Ç—ã menu: {menu_args}")
            else:
                print("   ‚ùå menu –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")

        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            app.bot.get_user = original_get_user
            app.bot.issue_nonce = original_issue_nonce
            app.bot.AsyncSessionLocal = original_AsyncSessionLocal
            app.bot.ROLES = original_ROLES
            app.bot.menu = original_menu

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    result = asyncio.run(test_demo_switch())
    if result:
        print("\nüéâ –¢–µ—Å—Ç demo_switch –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –ü—Ä–æ–±–ª–µ–º–∞ —Å demo_switch")
