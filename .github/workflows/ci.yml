name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: schoolbot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Run linting checks
      run: |
        python -m ruff check app/ --output-format=text
        python -m black --check app/
        python -m mypy app/ --ignore-missing-imports --show-error-codes

    - name: Run security checks
      run: |
        python -m bandit -r app/ -f json -o bandit-report.json || true

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/schoolbot_test
        REDIS_URL: redis://localhost:6379/0
        TELEGRAM_TOKEN: test_token
        ENV: test
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  quality:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pre-commit

    - name: Run pre-commit
      run: |
        pre-commit run --all-files

    - name: Check code quality metrics
      run: |
        echo "=== Ruff Errors ==="
        python -m ruff check app/ --output-format=text | wc -l
        echo "=== MyPy Errors ==="
        python -m mypy app/ --ignore-missing-imports --show-error-codes | wc -l
        echo "=== Black Check ==="
        python -m black --check app/ || echo "Files need formatting"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, quality]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        echo "Current environment: ${{ github.ref }}"
