repos:
  # Автоформатирование кода
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]

  # Сортировка импортов
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Линтер для проверки стиля и потенциальных ошибок
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]

  # Статическая типизация
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: [--ignore-missing-imports, --no-strict-optional]

  # Проверка безопасности
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, ., -f, json, -o, bandit-report.json]
        exclude: ^(tests/|venv/|.venv/)

  # Проверка на уязвимости в зависимостях
  - repo: https://github.com/pyupio/safety
    rev: v2.3.5
    hooks:
      - id: safety
        args: [--full-report]

  # Проверка на секреты в коде
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.1
    hooks:
      - id: gitleaks
        args: [detect, --source, ., --report-format, json, --report-path, gitleaks-report.json]

  # Проверка файлов локализации
  - repo: local
    hooks:
      - id: check-locales
        name: Check locale files
        entry: python -c "import toml; from pathlib import Path; ru_path = Path('app/i18n/ru.toml'); en_path = Path('app/i18n/en.toml'); ru = toml.load(ru_path) if ru_path.exists() else {}; en = toml.load(en_path) if en_path.exists() else {}; print('✅ Файлы локализации проверены')"
        language: system
        files: ^app/i18n/.*\.toml$

  # Запуск тестов
  - repo: local
    hooks:
      - id: run-tests
        name: Run tests
        entry: pytest tests/ -v --tb=short
        language: system
        always_run: true
        pass_filenames: false

  # Проверка покрытия тестами
  - repo: local
    hooks:
      - id: check-coverage
        name: Check test coverage
        entry: pytest tests/ --cov=app --cov-report=term-missing --cov-fail-under=80
        language: system
        always_run: true
        pass_filenames: false

  # Проверка миграций
  - repo: local
    hooks:
      - id: check-migrations
        name: Check database migrations
        entry: python -c "from pathlib import Path; migrations_dir = Path('migrations/versions'); print('✅ Миграции проверены') if migrations_dir.exists() and list(migrations_dir.glob('*.py')) else exit(1)"
        language: system
        files: ^migrations/versions/.*\.py$

  # Проверка конфигурационных файлов
  - repo: local
    hooks:
      - id: check-configs
        name: Check configuration files
        entry: python -c "import yaml; from pathlib import Path; config_files = ['docker-compose.yml', 'prometheus/prometheus.yml', 'grafana/provisioning/dashboards/dashboards.yml']; print('✅ Конфигурационные файлы проверены') if all(Path(f).exists() for f in config_files) else exit(1)"
        language: system
        files: ^(docker-compose\.yml|prometheus/.*\.yml|grafana/.*\.yml)$

  # Проверка документации
  - repo: local
    hooks:
      - id: check-docs
        name: Check documentation
        entry: python -c "from pathlib import Path; required_docs = ['README.md', 'QUICK_START.md', 'SECURITY.md', 'DEPLOYMENT_SUMMARY.md']; print('✅ Документация проверена') if all(Path(doc).exists() for doc in required_docs) else exit(1)"
        language: system
        files: ^(README\.md|QUICK_START\.md|SECURITY\.md|DEPLOYMENT_SUMMARY\.md)$

  # Проверка зависимостей
  - repo: local
    hooks:
      - id: check-dependencies
        name: Check dependencies
        entry: python -c "from pathlib import Path; requirements_file = Path('requirements.txt'); print('✅ Зависимости проверены') if requirements_file.exists() else exit(1)"
        language: system
        files: ^requirements\.txt$

  # Проверка структуры проекта
  - repo: local
    hooks:
      - id: check-project-structure
        name: Check project structure
        entry: python -c "from pathlib import Path; required_dirs = ['app', 'app/routes', 'app/db', 'app/handlers', 'app/keyboards', 'app/middlewares', 'app/repositories', 'app/schemas', 'app/services', 'app/utils', 'tests', 'migrations']; print('✅ Структура проекта проверена') if all(Path(dir_path).exists() for dir_path in required_dirs) else exit(1)"
        language: system
        always_run: true
        pass_filenames: false

  # Проверка переменных окружения
  - repo: local
    hooks:
      - id: check-env
        name: Check environment variables
        entry: python -c "from pathlib import Path; env_example = Path('env.example'); print('✅ env.example проверен') if env_example.exists() else exit(1)"
        language: system
        files: ^env\.example$

  # Проверка Docker файлов
  - repo: local
    hooks:
      - id: check-docker
        name: Check Docker files
        entry: python -c "from pathlib import Path; dockerfile = Path('Dockerfile'); docker_compose = Path('docker-compose.yml'); print('✅ Docker файлы проверены') if dockerfile.exists() and docker_compose.exists() else exit(1)"
        language: system
        files: ^(Dockerfile|docker-compose\.yml)$
