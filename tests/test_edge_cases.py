"""
–¢–µ—Å—Ç—ã edge cases –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è School_bot
–ü—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
"""

import asyncio
from unittest.mock import AsyncMock, patch

import pytest
from aiogram.types import CallbackQuery, Message

from app.middlewares.csrf import CSRFMiddleware
from app.middlewares.rate_limit import RateLimitMiddleware
from app.repositories.user_repo import get_user, update_user_intro
from app.services.limiter import LimitResult, hit
from app.utils.csrf import check_nonce, escape_html, issue_nonce
from app.utils.hash import check_pwd, hash_pwd


class TestRateLimitEdgeCases:
    """–¢–µ—Å—Ç—ã edge cases –¥–ª—è rate limiting"""

    @pytest.mark.asyncio
    async def test_rate_limit_zero_limit(self):
        """–¢–µ—Å—Ç rate limiting —Å –Ω—É–ª–µ–≤—ã–º –ª–∏–º–∏—Ç–æ–º"""
        middleware = RateLimitMiddleware(limit=0, window=60)

        mock_message = AsyncMock(spec=Message)
        mock_message.from_user = AsyncMock()
        mock_message.from_user.id = 12345

        mock_handler = AsyncMock()

        # –° –Ω—É–ª–µ–≤—ã–º –ª–∏–º–∏—Ç–æ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è
        with patch("app.services.limiter.hit") as mock_hit:
            mock_hit.return_value = LimitResult(allowed=False)

            result = await middleware(mock_handler, mock_message, {})

            assert result is None  # –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

    @pytest.mark.asyncio
    async def test_rate_limit_negative_window(self):
        """–¢–µ—Å—Ç rate limiting —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –æ–∫–Ω–æ–º"""
        # –°–æ–∑–¥–∞–µ–º middleware —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
        middleware = RateLimitMiddleware(limit=10, window=-1)

        mock_message = AsyncMock(spec=Message)
        mock_message.from_user = AsyncMock()
        mock_message.from_user.id = 12345

        mock_handler = AsyncMock()

        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        result = await middleware(mock_handler, mock_message, {})
        assert result is not None

    @pytest.mark.asyncio
    async def test_rate_limit_no_user(self):
        """–¢–µ—Å—Ç rate limiting –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        middleware = RateLimitMiddleware(limit=10, window=60)

        mock_message = AsyncMock(spec=Message)
        mock_message.from_user = None  # –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        mock_handler = AsyncMock()

        # –î–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        result = await middleware(mock_handler, mock_message, {})
        assert result is not None

    @pytest.mark.asyncio
    async def test_rate_limit_concurrent_requests(self):
        """–¢–µ—Å—Ç rate limiting –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        middleware = RateLimitMiddleware(limit=5, window=60)

        mock_message = AsyncMock(spec=Message)
        mock_message.from_user = AsyncMock()
        mock_message.from_user.id = 12345

        mock_handler = AsyncMock()

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        async def make_request():
            return await middleware(mock_handler, mock_message, {})

        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        tasks = [make_request() for _ in range(10)]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        assert len(results) == 10


class TestCSRFEdgeCases:
    """–¢–µ—Å—Ç—ã edge cases –¥–ª—è CSRF –∑–∞—â–∏—Ç—ã"""

    @pytest.mark.asyncio
    async def test_csrf_no_data(self):
        """–¢–µ—Å—Ç CSRF –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö"""
        middleware = CSRFMiddleware()

        mock_callback = AsyncMock(spec=CallbackQuery)
        mock_callback.data = None  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö

        mock_handler = AsyncMock()

        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
        result = await middleware(mock_handler, mock_callback, {})
        assert result is None

    @pytest.mark.asyncio
    async def test_csrf_malformed_data(self):
        """–¢–µ—Å—Ç CSRF —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        middleware = CSRFMiddleware()

        mock_callback = AsyncMock(spec=CallbackQuery)
        mock_callback.data = "no_colon_separator"  # –ù–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è

        mock_handler = AsyncMock()

        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
        result = await middleware(mock_handler, mock_callback, {})
        assert result is None

    @pytest.mark.asyncio
    async def test_csrf_no_message(self):
        """–¢–µ—Å—Ç CSRF –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        middleware = CSRFMiddleware()

        mock_callback = AsyncMock(spec=CallbackQuery)
        mock_callback.data = "test_nonce:test_data"
        mock_callback.message = None  # –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        mock_handler = AsyncMock()

        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
        result = await middleware(mock_handler, mock_callback, {})
        assert result is None

    @pytest.mark.asyncio
    async def test_csrf_empty_nonce(self):
        """–¢–µ—Å—Ç CSRF —Å –ø—É—Å—Ç—ã–º nonce"""
        middleware = CSRFMiddleware()

        mock_callback = AsyncMock(spec=CallbackQuery)
        mock_callback.data = ":test_data"  # –ü—É—Å—Ç–æ–π nonce

        mock_handler = AsyncMock()

        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
        result = await middleware(mock_handler, mock_callback, {})
        assert result is None


class TestPasswordHashingEdgeCases:
    """–¢–µ—Å—Ç—ã edge cases –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π"""

    def test_password_hashing_empty_password(self):
        """–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        empty_password = ""

        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
        hashed = hash_pwd(empty_password)
        assert hashed != empty_password
        assert check_pwd(empty_password, hashed) is True

    def test_password_hashing_very_long_password(self):
        """–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        long_password = "a" * 1000

        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        hashed = hash_pwd(long_password)
        assert hashed != long_password
        assert check_pwd(long_password, hashed) is True

    def test_password_hashing_special_characters(self):
        """–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
        special_password = "!@#$%^&*()_+-=[]{}|;':\",./<>?"

        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        hashed = hash_pwd(special_password)
        assert hashed != special_password
        assert check_pwd(special_password, hashed) is True

    def test_password_hashing_unicode(self):
        """–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏"""
        unicode_password = "–ø–∞—Ä–æ–ª—å123üöÄüåü"

        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Unicode —Å–∏–º–≤–æ–ª—ã
        hashed = hash_pwd(unicode_password)
        assert hashed != unicode_password
        assert check_pwd(unicode_password, hashed) is True

    def test_password_verification_invalid_hash(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ö–µ—à–µ–º"""
        password = "test_password"
        invalid_hash = "invalid_hash_format"

        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å False –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ö–µ—à–∞
        assert check_pwd(password, invalid_hash) is False


class TestCSRFTokenEdgeCases:
    """–¢–µ—Å—Ç—ã edge cases –¥–ª—è CSRF —Ç–æ–∫–µ–Ω–æ–≤"""

    @pytest.mark.asyncio
    async def test_issue_nonce_edge_cases(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è nonce –≤ edge cases"""
        mock_storage = AsyncMock()

        # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ ID
        nonce = await issue_nonce(mock_storage, 0, 0)
        assert isinstance(nonce, str)
        assert len(nonce) > 0

        # –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ ID
        nonce = await issue_nonce(mock_storage, -1, -1)
        assert isinstance(nonce, str)
        assert len(nonce) > 0

    @pytest.mark.asyncio
    async def test_check_nonce_edge_cases(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ nonce –≤ edge cases"""
        mock_storage = AsyncMock()
        mock_storage.get_data.return_value = {"csrf": "test_nonce"}

        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º nonce
        is_valid = await check_nonce(mock_storage, 12345, 67890, "")
        assert is_valid is False

        # –¢–µ—Å—Ç —Å None nonce
        is_valid = await check_nonce(mock_storage, 12345, 67890, None)
        assert is_valid is False

        # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º nonce
        is_valid = await check_nonce(mock_storage, 12345, 67890, "wrong_nonce")
        assert is_valid is False

    def test_escape_html_edge_cases(self):
        """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML –≤ edge cases"""
        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        assert escape_html("") == ""

        # –°—Ç—Ä–æ–∫–∞ –±–µ–∑ HTML
        assert escape_html("plain text") == "plain text"

        # –°—Ç—Ä–æ–∫–∞ —Å HTML —Ç–µ–≥–∞–º–∏
        html_text = "<script>alert('xss')</script>"
        escaped = escape_html(html_text)
        assert "<" not in escaped
        assert ">" not in escaped

        # –°—Ç—Ä–æ–∫–∞ —Å –∫–∞–≤—ã—á–∫–∞–º–∏
        quote_text = 'He said "Hello"'
        escaped = escape_html(quote_text)
        assert '"' not in escaped

        # –°—Ç—Ä–æ–∫–∞ —Å –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–º
        amp_text = "AT&T & Co."
        escaped = escape_html(amp_text)
        assert "&" not in escaped


class TestUserRepositoryEdgeCases:
    """–¢–µ—Å—Ç—ã edge cases –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    @pytest.mark.asyncio
    async def test_get_user_edge_cases(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ edge cases"""
        # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º ID
        user = await get_user(0)
        assert user.tg_id == 0
        assert user.role == "student"

        # –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º ID
        user = await get_user(-1)
        assert user.tg_id == -1
        assert user.role == "student"

        # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º ID
        large_id = 999999999999999
        user = await get_user(large_id)
        assert user.tg_id == large_id
        assert user.role == "student"

    @pytest.mark.asyncio
    async def test_update_user_intro_edge_cases(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤ edge cases"""
        # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º ID
        await update_user_intro(0, True)
        user = await get_user(0)
        assert user.seen_intro is True

        # –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º ID
        await update_user_intro(-1, False)
        user = await get_user(-1)
        assert user.seen_intro is False


class TestLimiterEdgeCases:
    """–¢–µ—Å—Ç—ã edge cases –¥–ª—è rate limiter"""

    @pytest.mark.asyncio
    async def test_hit_edge_cases(self):
        """–¢–µ—Å—Ç rate limiter –≤ edge cases"""
        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –∫–ª—é—á–æ–º
        result = await hit("", 10, 60)
        assert isinstance(result, LimitResult)

        # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º –ª–∏–º–∏—Ç–æ–º
        result = await hit("test_key", 0, 60)
        assert isinstance(result, LimitResult)
        assert result.allowed is False

        # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º –æ–∫–Ω–æ–º
        result = await hit("test_key", 10, 0)
        assert isinstance(result, LimitResult)

        # –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        result = await hit("test_key", -1, -1)
        assert isinstance(result, LimitResult)

    @pytest.mark.asyncio
    async def test_hit_concurrent_access(self):
        """–¢–µ—Å—Ç rate limiter –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ"""

        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        async def make_hit():
            return await hit("concurrent_key", 5, 60)

        tasks = [make_hit() for _ in range(10)]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        assert len(results) == 10
        assert all(isinstance(r, LimitResult) for r in results)


class TestConfigurationEdgeCases:
    """–¢–µ—Å—Ç—ã edge cases –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def test_settings_edge_cases(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ edge cases"""
        from app.config import Settings

        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        with pytest.raises(ValueError):
            Settings(TELEGRAM_TOKEN="")

        # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º –ø–∞—Ä–æ–ª–µ–º
        with pytest.raises(ValueError):
            Settings(DB_PASS="123")

        # –¢–µ—Å—Ç —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º –ø–æ—Ä—Ç–æ–º
        with pytest.raises(ValueError):
            Settings(DB_PORT=0)

        # –¢–µ—Å—Ç —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –¥–Ω—è–º–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        with pytest.raises(ValueError):
            Settings(KEEP_DAYS=0)


class TestErrorHandlingEdgeCases:
    """–¢–µ—Å—Ç—ã edge cases –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""

    @pytest.mark.asyncio
    async def test_middleware_error_edge_cases(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ middleware –≤ edge cases"""
        middleware = RateLimitMiddleware(limit=10, window=60)

        # –¢–µ—Å—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ from_user
        mock_message = AsyncMock(spec=Message)
        mock_message.from_user = None

        mock_handler = AsyncMock()

        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        result = await middleware(mock_handler, mock_message, {})
        assert result is not None

        # –¢–µ—Å—Ç —Å handler, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        mock_handler.side_effect = Exception("Handler error")

        with pytest.raises(Exception):
            await middleware(mock_handler, mock_message, {})

    @pytest.mark.asyncio
    async def test_csrf_error_edge_cases(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ CSRF middleware –≤ edge cases"""
        middleware = CSRFMiddleware()

        # –¢–µ—Å—Ç —Å callback –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        mock_callback = AsyncMock(spec=CallbackQuery)
        mock_callback.data = None

        mock_handler = AsyncMock()

        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        result = await middleware(mock_handler, mock_callback, {})
        assert result is None

        # –¢–µ—Å—Ç —Å callback –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        mock_callback.data = "test_nonce:test_data"
        mock_callback.message = None

        result = await middleware(mock_handler, mock_callback, {})
        assert result is None


@pytest.fixture
def mock_storage():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ storage"""
    return AsyncMock()


@pytest.fixture
def mock_handler():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ handler"""
    return AsyncMock()


@pytest.fixture
def mock_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message = AsyncMock(spec=Message)
    message.from_user = AsyncMock()
    message.from_user.id = 12345
    return message


@pytest.fixture
def mock_callback():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ callback"""
    callback = AsyncMock(spec=CallbackQuery)
    callback.data = "test_nonce:test_data"
    callback.message = AsyncMock()
    callback.message.chat.id = 12345
    callback.from_user.id = 67890
    return callback
