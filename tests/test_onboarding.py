# tests/test_onboarding.py
import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram.types import Message, CallbackQuery, FSInputFile
from app.roles import ROLES

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –∏–∑–±–µ–≥–∞—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π —Å –ë–î
ROLE_IMAGES = {
    "teacher": "onboard_cards_v3/onboard_teacher.png",
    "admin": "onboard_cards_v3/onboard_admin.png", 
    "director": "onboard_cards_v3/onboard_director.png",
    "parent": "onboard_cards_v3/onboard_parent.png",
    "student": "onboard_cards_v3/onboard_student.png",
    "psych": "onboard_cards_v3/onboard_psych.png"
}

ROLE_DESCRIPTIONS = {
    "teacher": {
        "title": "üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—å",
        "description": "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏\n‚Ä¢ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á–µ–Ω–∏–∫–∞–º–∏ –∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏"
    },
    "admin": {
        "title": "üèõ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", 
        "description": "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    },
    "director": {
        "title": "üìà –î–∏—Ä–µ–∫—Ç–æ—Ä",
        "description": "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ KPI\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º"
    },
    "parent": {
        "title": "üë™ –†–æ–¥–∏—Ç–µ–ª—å",
        "description": "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π –¥–µ—Ç–µ–π\n‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ–∫\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫\n‚Ä¢ –°–≤—è–∑—å —Å —É—á–∏—Ç–µ–ª—è–º–∏"
    },
    "student": {
        "title": "üë®‚Äçüéì –£—á–µ–Ω–∏–∫", 
        "description": "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫\n‚Ä¢ –ó–∞–¥–∞–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"
    },
    "psych": {
        "title": "üßë‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥",
        "description": "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å"
    }
}

@pytest.fixture
def mock_message():
    """–ú–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message = AsyncMock()
    message.from_user = AsyncMock()
    message.from_user.id = 12345
    message.answer = AsyncMock()
    return message

@pytest.fixture
def mock_callback():
    """–ú–æ–∫ –¥–ª—è callback query"""
    callback = AsyncMock()
    callback.from_user = AsyncMock()
    callback.from_user.id = 12345
    callback.message = AsyncMock()
    callback.message.edit_text = AsyncMock()
    callback.message.answer_photo = AsyncMock()
    callback.message.answer = AsyncMock()
    callback.message.edit_reply_markup = AsyncMock()
    callback.answer = AsyncMock()
    return callback

@pytest.fixture
def mock_state():
    """–ú–æ–∫ –¥–ª—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    state = AsyncMock()
    state.set_state = AsyncMock()
    state.update_data = AsyncMock()
    state.get_data = AsyncMock(return_value={})
    state.clear = AsyncMock()
    return state

@pytest.mark.asyncio
@patch('app.handlers.onboarding.get_role_selection_keyboard')
async def test_start_onboarding(mock_keyboard, mock_message, mock_state):
    """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    from app.handlers.onboarding import start_onboarding
    
    await start_onboarding(mock_message, mock_state, "ru")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    mock_state.set_state.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    mock_message.answer.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    call_args = mock_message.answer.call_args
    assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SchoolBot" in call_args[0][0]

@pytest.mark.asyncio
@patch('app.handlers.onboarding.get_confirmation_keyboard')
async def test_role_selection(mock_keyboard, mock_callback, mock_state):
    """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    from app.handlers.onboarding import handle_role_selection
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏ —É—á–∏—Ç–µ–ª—è
    mock_callback.data = "role_teacher"
    
    await handle_role_selection(mock_callback, mock_state, "ru")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    mock_state.update_data.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
    mock_callback.message.answer_photo.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø–æ–¥–ø–∏—Å–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏
    call_args = mock_callback.message.answer_photo.call_args
    caption = call_args[1]['caption']
    assert "–£—á–∏—Ç–µ–ª—å" in caption

@pytest.mark.asyncio
async def test_role_confirmation(mock_callback, mock_state):
    """–¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    from app.handlers.onboarding import handle_role_confirmation
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å
    mock_state.get_data.return_value = {"selected_role": "teacher"}
    mock_callback.data = "confirm_role_teacher"
    
    await handle_role_confirmation(mock_callback, mock_state, "ru")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ
    mock_state.clear.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    mock_callback.message.answer.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–±–æ—Ä–µ
    call_args = mock_callback.message.answer.call_args
    assert "–û—Ç–ª–∏—á–Ω–æ" in call_args[0][0]

@pytest.mark.asyncio
@patch('app.handlers.onboarding.send_role_carousel')
async def test_carousel_navigation(mock_send_carousel, mock_callback, mock_state):
    """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏"""
    from app.handlers.onboarding import handle_carousel_navigation
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ–ª–∏
    mock_callback.data = "carousel_1"
    
    await handle_carousel_navigation(mock_callback, mock_state, "ru")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏
    mock_send_carousel.assert_called_once()

def test_role_images_exist():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π"""
    import os
    
    for role, image_path in ROLE_IMAGES.items():
        assert role in ROLES, f"–†–æ–ª—å {role} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ROLES"
        assert os.path.exists(image_path), f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

def test_role_descriptions_exist():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π"""
    for role in ROLES.keys():
        if role != "super":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
            assert role in ROLE_DESCRIPTIONS, f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–æ–ª–∏ {role} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            assert "title" in ROLE_DESCRIPTIONS[role], f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–æ–ª–∏ {role} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            assert "description" in ROLE_DESCRIPTIONS[role], f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–æ–ª–∏ {role} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

@pytest.mark.asyncio
@patch('app.handlers.onboarding.get_confirmation_keyboard')
async def test_info_role_display(mock_keyboard, mock_callback, mock_state):
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª–∏"""
    from app.handlers.onboarding import show_role_info
    
    mock_callback.data = "info_teacher"
    
    await show_role_info(mock_callback, mock_state, "ru")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
    mock_callback.message.answer_photo.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø–æ–¥–ø–∏—Å–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏
    call_args = mock_callback.message.answer_photo.call_args
    caption = call_args[1]['caption']
    assert "–£—á–∏—Ç–µ–ª—å" in caption
    assert "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ" in caption 