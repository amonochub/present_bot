"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–ø—Ä–∞–≤–∫–∏
"""

import pytest
from unittest.mock import AsyncMock, MagicMock
from aiogram.types import Message, CallbackQuery, User as TelegramUser
from aiogram.filters import Command

from app.routes.help import (
    help_command,
    handle_help_callback,
    help_button,
    get_role_help,
    get_role_help_keyboard,
    get_detailed_help,
    get_faq_text
)
from app.roles import UserRole
from app.db.user import User


class TestHelpSystem:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–ø—Ä–∞–≤–∫–∏"""
    
    @pytest.fixture
    def mock_message(self):
        """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = MagicMock(spec=Message)
        message.from_user = MagicMock(spec=TelegramUser)
        message.from_user.id = 123456
        message.answer = AsyncMock()
        return message
    
    @pytest.fixture
    def mock_callback(self):
        """–ú–æ–∫ callback"""
        callback = MagicMock(spec=CallbackQuery)
        callback.from_user = MagicMock(spec=TelegramUser)
        callback.from_user.id = 123456
        callback.answer = AsyncMock()
        callback.message = MagicMock()
        callback.message.edit_text = AsyncMock()
        return callback
    
    @pytest.mark.asyncio
    async def test_help_command_unauthorized(self, mock_message, monkeypatch):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ú–æ–∫–∞–µ–º get_user
        async def mock_get_user(tg_id):
            return None
        monkeypatch.setattr("app.routes.help.get_user", mock_get_user)
        
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            if key == "help.help_unauthorized":
                return "‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ SchoolBot**\n\nüéì SchoolBot - —ç—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞..."
            elif key == "help.help_start_button":
                return "üöÄ –ù–∞—á–∞—Ç—å"
            return key
        monkeypatch.setattr("app.routes.help.t", mock_t)
        
        await help_command(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args
        assert "‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ SchoolBot**" in call_args[0][0]
        assert call_args[1]["parse_mode"] == "HTML"
    
    @pytest.mark.asyncio
    async def test_help_command_authorized(self, mock_message, monkeypatch):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ú–æ–∫–∞–µ–º get_user
        async def mock_get_user(tg_id):
            user = MagicMock()
            user.role = UserRole.STUDENT
            return user
        monkeypatch.setattr("app.routes.help.get_user", mock_get_user)
        
        await help_command(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args
        assert "üë®‚Äçüéì **–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞**" in call_args[0][0]
        assert call_args[1]["parse_mode"] == "HTML"
    
    @pytest.mark.asyncio
    async def test_help_callback_start(self, mock_callback, monkeypatch):
        """–¢–µ—Å—Ç callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å'"""
        mock_callback.data = "help:start"
        
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            if key == "help.help_start_message":
                return "üöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"
            return key
        monkeypatch.setattr("app.routes.help.t", mock_t)
        
        await handle_help_callback(mock_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        assert "üöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start" in mock_callback.message.edit_text.call_args[0][0]
        mock_callback.answer.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_help_callback_back(self, mock_callback, monkeypatch):
        """–¢–µ—Å—Ç callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
        mock_callback.data = "help:back"
        
        # –ú–æ–∫–∞–µ–º get_user
        async def mock_get_user(tg_id):
            user = MagicMock()
            user.role = UserRole.TEACHER
            return user
        monkeypatch.setattr("app.routes.help.get_user", mock_get_user)
        
        await handle_help_callback(mock_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        assert "üë©‚Äçüè´ **–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è —É—á–∏—Ç–µ–ª—è**" in mock_callback.message.edit_text.call_args[0][0]
        mock_callback.answer.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_help_callback_detail(self, mock_callback, monkeypatch):
        """–¢–µ—Å—Ç callback –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏"""
        mock_callback.data = "help:student:tasks"
        
        await handle_help_callback(mock_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        assert "üìã **–ó–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞**" in mock_callback.message.edit_text.call_args[0][0]
        mock_callback.answer.assert_called_once()
    
    def test_get_role_help(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ä–æ–ª–∏"""
        # –¢–µ—Å—Ç –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        student_help = get_role_help(UserRole.STUDENT)
        assert "üë®‚Äçüéì **–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞**" in student_help
        assert "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π –æ—Ç —É—á–∏—Ç–µ–ª–µ–π" in student_help
        
        # –¢–µ—Å—Ç –¥–ª—è —É—á–∏—Ç–µ–ª—è
        teacher_help = get_role_help(UserRole.TEACHER)
        assert "üë©‚Äçüè´ **–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è —É—á–∏—Ç–µ–ª—è**" in teacher_help
        assert "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –æ —É—á–µ–Ω–∏–∫–∞—Ö" in teacher_help
        
        # –¢–µ—Å—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ä–æ–ª–∏
        unknown_help = get_role_help("unknown")
        assert "‚ùì **–û–±—â–∞—è —Å–ø—Ä–∞–≤–∫–∞**" in unknown_help
    
    def test_get_role_help_keyboard(self, monkeypatch):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–æ–ª–∏"""
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            key_map = {
                "help.help_student_tasks": "üìã –ó–∞–¥–∞–Ω–∏—è",
                "help.help_student_notes": "üìù –ó–∞–º–µ—Ç–∫–∏",
                "help.help_student_ask": "‚ùì –í–æ–ø—Ä–æ—Å—ã",
                "help.help_main_menu_button": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            }
            return key_map.get(key, key)
        monkeypatch.setattr("app.routes.help.t", mock_t)
        
        keyboard = get_role_help_keyboard(UserRole.STUDENT)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        assert len(keyboard.inline_keyboard) == 4  # 3 –∫–Ω–æ–ø–∫–∏ + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        assert keyboard.inline_keyboard[0][0].text == "üìã –ó–∞–¥–∞–Ω–∏—è"
        assert keyboard.inline_keyboard[1][0].text == "üìù –ó–∞–º–µ—Ç–∫–∏"
        assert keyboard.inline_keyboard[2][0].text == "‚ùì –í–æ–ø—Ä–æ—Å—ã"
        assert keyboard.inline_keyboard[3][0].text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    
    def test_get_detailed_help(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏"""
        # –¢–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏–π —É—á–µ–Ω–∏–∫–∞
        tasks_help = get_detailed_help("student", "tasks")
        assert "üìã **–ó–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞**" in tasks_help
        assert "–ö–∞–∫ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è:" in tasks_help
        
        # –¢–µ—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ —É—á–∏—Ç–µ–ª—è
        notes_help = get_detailed_help("teacher", "notes")
        assert "üìù **–ó–∞–º–µ—Ç–∫–∏ –æ —É—á–µ–Ω–∏–∫–∞—Ö**" in notes_help
        assert "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É:" in notes_help
        
        # –¢–µ—Å—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        unknown_help = get_detailed_help("unknown", "unknown")
        assert "üìñ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É unknown" in unknown_help
    
    def test_get_faq_text(self, monkeypatch):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è FAQ —Ç–µ–∫—Å—Ç–∞"""
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            key_map = {
                "help.help_faq_title": "‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**",
                "help.help_faq_role_change": "**Q: –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å?**\nA: –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.",
                "help.help_faq_password": "**Q: –ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å?**\nA: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                "help.help_faq_notifications": "**Q: –ù–µ –ø–æ–ª—É—á–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?**\nA: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
                "help.help_faq_support": "**Q: –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?**\nA: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."
            }
            return key_map.get(key, key)
        monkeypatch.setattr("app.routes.help.t", mock_t)
        
        faq_text = get_faq_text("ru")
        
        assert "‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**" in faq_text
        assert "**Q: –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å?**" in faq_text
        assert "**Q: –ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å?**" in faq_text
        assert "**Q: –ù–µ –ø–æ–ª—É—á–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?**" in faq_text
        assert "**Q: –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?**" in faq_text
    
    @pytest.mark.asyncio
    async def test_help_button_success(self, mock_callback, monkeypatch):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∫–∏"""
        # –ú–æ–∫–∞–µ–º get_user_role
        async def mock_get_user_role(tg_id):
            return UserRole.STUDENT
        monkeypatch.setattr("app.routes.help.get_user_role", mock_get_user_role)
        
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            if key == "help.help_help_loaded":
                return "–°–ø—Ä–∞–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            return key
        monkeypatch.setattr("app.routes.help.t", mock_t)
        
        await help_button(mock_callback, "ru")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        assert "üë®‚Äçüéì **–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞**" in mock_callback.message.edit_text.call_args[0][0]
        mock_callback.answer.assert_called_once_with("–°–ø—Ä–∞–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    @pytest.mark.asyncio
    async def test_help_button_user_not_found(self, mock_callback, monkeypatch):
        """–¢–µ—Å—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∫–∏ —Å –æ—à–∏–±–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        mock_callback.from_user = None
        
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            if key == "help.help_user_not_found":
                return "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
            return key
        monkeypatch.setattr("app.routes.help.t", mock_t)
        
        await help_button(mock_callback, "ru")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞
        mock_callback.answer.assert_called_once_with("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    
    @pytest.mark.asyncio
    async def test_help_button_no_role(self, mock_callback, monkeypatch):
        """–¢–µ—Å—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —Ä–æ–ª–∏"""
        # –ú–æ–∫–∞–µ–º get_user_role
        async def mock_get_user_role(tg_id):
            return None
        monkeypatch.setattr("app.routes.help.get_user_role", mock_get_user_role)
        
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            if key == "help.help_please_login":
                return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É."
            return key
        monkeypatch.setattr("app.routes.help.t", mock_t)
        
        await help_button(mock_callback, "ru")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞
        mock_callback.answer.assert_called_once_with("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.", show_alert=True) 