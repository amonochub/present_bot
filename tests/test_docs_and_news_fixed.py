"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ Context7
"""

import pytest
from unittest.mock import MagicMock, AsyncMock
from aiogram.types import Message, CallbackQuery, User, Chat
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.routes.docs import (
    show_docs, send_doc_link, back_to_docs_list, 
    show_news, admin_announce, get_localized_text
)


@pytest.fixture
def mock_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è Message"""
    message = MagicMock(spec=Message)
    message.from_user = MagicMock(spec=User)
    message.from_user.id = 123456
    message.text = "/docs"
    message.answer = AsyncMock()
    return message


@pytest.fixture
def mock_callback():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è CallbackQuery"""
    callback = MagicMock(spec=CallbackQuery)
    callback.from_user = MagicMock(spec=User)
    callback.from_user.id = 123456
    callback.data = "doc_standard"
    callback.message = MagicMock()
    callback.message.edit_text = AsyncMock()
    callback.message.answer = AsyncMock()
    callback.answer = AsyncMock()
    return callback


@pytest.fixture
def mock_user():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = MagicMock()
    user.id = 123456
    user.role = "student"
    return user


@pytest.fixture
def mock_admin_user():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    user = MagicMock()
    user.id = 123456
    user.role = "admin"
    return user


def test_get_localized_text():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_localized_text"""
    # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é t
    with pytest.MonkeyPatch().context() as m:
        m.setattr("app.i18n.t", lambda key: f"LOCALIZED_{key}")
        
        # –¢–µ—Å—Ç –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        result = get_localized_text("test.key")
        assert result == "LOCALIZED_test.key"
        
        # –¢–µ—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = get_localized_text("test.key", param="value")
        assert result == "LOCALIZED_test.key"


@pytest.mark.asyncio
async def test_show_docs_success(mock_message, mock_user, monkeypatch):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    # –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    monkeypatch.setattr("app.repositories.user_repo.get_user", AsyncMock(return_value=mock_user))
    monkeypatch.setattr("app.i18n.t", lambda key: f"LOCALIZED_{key}")
    
    await show_docs(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    mock_message.answer.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    call_args = mock_message.answer.call_args
    assert "LOCALIZED_docs.list_header" in call_args[0][0]
    assert "LOCALIZED_docs.item_standard" in call_args[0][0]


@pytest.mark.asyncio
async def test_show_docs_no_user(mock_message, monkeypatch):
    """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ú–æ–∫–∏—Ä—É–µ–º get_user –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ None
    monkeypatch.setattr("app.repositories.user_repo.get_user", AsyncMock(return_value=None))
    
    await show_docs(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    mock_message.answer.assert_called_once_with("‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")


@pytest.mark.asyncio
async def test_send_doc_link_success(mock_callback, monkeypatch):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç"""
    # –ú–æ–∫–∏—Ä—É–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    monkeypatch.setattr("app.i18n.t", lambda key: f"LOCALIZED_{key}")
    
    await send_doc_link(mock_callback)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
    mock_callback.message.edit_text.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω
    mock_callback.answer.assert_called_once()


@pytest.mark.asyncio
async def test_send_doc_link_unknown(mock_callback, monkeypatch):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    mock_callback.data = "doc_unknown"
    
    # –ú–æ–∫–∏—Ä—É–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    monkeypatch.setattr("app.i18n.t", lambda key: f"LOCALIZED_{key}")
    
    await send_doc_link(mock_callback)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    mock_callback.message.answer.assert_called_once_with("LOCALIZED_docs.unknown_doc")
    mock_callback.answer.assert_called_once()


@pytest.mark.asyncio
async def test_back_to_docs_list(mock_callback, monkeypatch):
    """–¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    # –ú–æ–∫–∏—Ä—É–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    monkeypatch.setattr("app.i18n.t", lambda key: f"LOCALIZED_{key}")
    
    await back_to_docs_list(mock_callback)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
    mock_callback.message.edit_text.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    call_args = mock_callback.message.edit_text.call_args
    assert "LOCALIZED_docs.list_header" in call_args[0][0]
    
    mock_callback.answer.assert_called_once()


@pytest.mark.asyncio
async def test_show_news_success(mock_message, mock_user, monkeypatch):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    # –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    monkeypatch.setattr("app.repositories.user_repo.get_user", AsyncMock(return_value=mock_user))
    monkeypatch.setattr("app.i18n.t", lambda key, **kwargs: f"LOCALIZED_{key}")
    
    # –ú–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    mock_news = [
        {"title": "Test News 1", "date": "01.01.2024", "desc": "Description 1", "url": "http://test1.com"},
        {"title": "Test News 2", "date": "02.01.2024", "desc": "Description 2", "url": "http://test2.com"}
    ]
    monkeypatch.setattr("app.services.news_parser.get_news_cards", lambda limit: mock_news)
    
    await show_news(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å + –∏—Ç–æ–≥–æ–≤–æ–µ)
    assert mock_message.answer.call_count == 3  # 2 –Ω–æ–≤–æ—Å—Ç–∏ + –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


@pytest.mark.asyncio
async def test_show_news_no_user(mock_message, monkeypatch):
    """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ú–æ–∫–∏—Ä—É–µ–º get_user –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ None
    monkeypatch.setattr("app.repositories.user_repo.get_user", AsyncMock(return_value=None))
    
    await show_news(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    mock_message.answer.assert_called_once_with("‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤–æ—Å—Ç—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")


@pytest.mark.asyncio
async def test_show_news_empty(mock_message, mock_user, monkeypatch):
    """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
    # –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    monkeypatch.setattr("app.repositories.user_repo.get_user", AsyncMock(return_value=mock_user))
    monkeypatch.setattr("app.services.news_parser.get_news_cards", lambda limit: [])
    
    await show_news(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    mock_message.answer.assert_called_once_with("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@pytest.mark.asyncio
async def test_admin_announce_success(mock_message, mock_admin_user, monkeypatch):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º"""
    # –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    monkeypatch.setattr("app.repositories.user_repo.get_user", AsyncMock(return_value=mock_admin_user))
    monkeypatch.setattr("app.i18n.t", lambda key, **kwargs: f"LOCALIZED_{key}")
    
    mock_message.text = "/announce –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
    
    await admin_announce(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 2 —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—ä—è–≤–ª–µ–Ω–∏–µ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
    assert mock_message.answer.call_count == 2


@pytest.mark.asyncio
async def test_admin_announce_no_permission(mock_message, mock_user, monkeypatch):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∞–≤"""
    # –ú–æ–∫–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    monkeypatch.setattr("app.repositories.user_repo.get_user", AsyncMock(return_value=mock_user))
    
    mock_message.text = "/announce –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
    
    await admin_announce(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∞–≤
    mock_message.answer.assert_called_once_with("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")


@pytest.mark.asyncio
async def test_admin_announce_no_text(mock_message, mock_admin_user, monkeypatch):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    monkeypatch.setattr("app.repositories.user_repo.get_user", AsyncMock(return_value=mock_admin_user))
    
    mock_message.text = "/announce"
    
    await admin_announce(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    mock_message.answer.assert_called_once_with("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce —Ç–µ–∫—Å—Ç_–æ–±—ä—è–≤–ª–µ–Ω–∏—è")


@pytest.mark.asyncio
async def test_admin_announce_empty_text(mock_message, mock_admin_user, monkeypatch):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    # –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    monkeypatch.setattr("app.repositories.user_repo.get_user", AsyncMock(return_value=mock_admin_user))
    
    mock_message.text = "/announce   "
    
    await admin_announce(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    mock_message.answer.assert_called_once_with("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce —Ç–µ–∫—Å—Ç_–æ–±—ä—è–≤–ª–µ–Ω–∏—è")


@pytest.mark.asyncio
async def test_admin_announce_none_text(mock_message, mock_admin_user, monkeypatch):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å None —Ç–µ–∫—Å—Ç–æ–º"""
    # –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    monkeypatch.setattr("app.repositories.user_repo.get_user", AsyncMock(return_value=mock_admin_user))
    
    mock_message.text = None
    
    await admin_announce(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    mock_message.answer.assert_called_once_with("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce —Ç–µ–∫—Å—Ç_–æ–±—ä—è–≤–ª–µ–Ω–∏—è") 