"""
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è School_bot
–ü—Ä–æ–≤–µ—Ä—è—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import time
from unittest.mock import AsyncMock

import pytest

from app.repositories.user_repo import get_user, update_user_intro
from app.services.limiter import LimitResult, hit
from app.utils.csrf import check_nonce, issue_nonce
from app.utils.hash import check_pwd, hash_pwd


class TestPerformanceLimiter:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ rate limiter"""

    @pytest.mark.asyncio
    async def test_limiter_performance_high_load(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ limiter –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        start_time = time.time()

        tasks = []
        for i in range(1000):
            task = hit(f"perf_key_{i}", 100, 60)
            tasks.append(task)

        results = await asyncio.gather(*tasks)
        end_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        assert len(results) == 1000
        assert all(isinstance(r, LimitResult) for r in results)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥)
        execution_time = end_time - start_time
        assert execution_time < 5.0

        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")

    @pytest.mark.asyncio
    async def test_limiter_concurrent_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ limiter –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        # –°–æ–∑–¥–∞–µ–º 100 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        start_time = time.time()

        async def make_concurrent_requests():
            tasks = []
            for i in range(100):
                task = hit(f"concurrent_key_{i}", 50, 60)
                tasks.append(task)
            return await asyncio.gather(*tasks)

        results = await make_concurrent_requests()
        end_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert len(results) == 100
        assert all(isinstance(r, LimitResult) for r in results)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = end_time - start_time
        assert execution_time < 2.0

        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 100 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")

    @pytest.mark.asyncio
    async def test_limiter_memory_usage(self):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ limiter"""
        import os

        import psutil

        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB

        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in range(1000):
            await hit(f"memory_key_{i}", 10, 60)

        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_increase = final_memory - initial_memory

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB
        assert memory_increase < 50.0

        print(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {memory_increase:.2f} MB")


class TestPerformanceHashing:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π"""

    def test_password_hashing_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π"""
        passwords = [
            "short",
            "medium_password_123",
            "very_long_password_with_many_characters_and_numbers_123456789",
            "unicode_password_üöÄüåü‚ú®",
            "special_chars_!@#$%^&*()_+-=[]{}|;':\",./<>?",
        ]

        start_time = time.time()

        hashes = []
        for password in passwords:
            hashed = hash_pwd(password)
            hashes.append(hashed)

        end_time = time.time()
        execution_time = end_time - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ö–µ—à–∏ —Å–æ–∑–¥–∞–Ω—ã
        assert len(hashes) == len(passwords)
        assert all(len(h) > 0 for h in hashes)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã)
        assert execution_time < 1.0

        print(f"–°–æ–∑–¥–∞–Ω–æ {len(hashes)} —Ö–µ—à–µ–π –∑–∞ {execution_time:.3f} —Å–µ–∫—É–Ω–¥")

    def test_password_verification_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª–µ–π"""
        test_password = "test_password_123"
        hashed = hash_pwd(test_password)

        start_time = time.time()

        # –í—ã–ø–æ–ª–Ω—è–µ–º 1000 –ø—Ä–æ–≤–µ—Ä–æ–∫
        for _ in range(1000):
            result = check_pwd(test_password, hashed)
            assert result is True

        end_time = time.time()
        execution_time = end_time - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        assert execution_time < 2.0

        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ 1000 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–∞—Ä–æ–ª–µ–π –∑–∞ {execution_time:.3f} —Å–µ–∫—É–Ω–¥")

    def test_hashing_different_password_lengths(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã"""
        password_lengths = [10, 50, 100, 500, 1000]

        results = {}
        for length in password_lengths:
            password = "a" * length
            start_time = time.time()

            hashed = hash_pwd(password)
            result = check_pwd(password, hashed)

            end_time = time.time()
            execution_time = end_time - start_time

            results[length] = execution_time
            assert result is True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–∞—Å—Ç–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
        for length in password_lengths[1:]:
            assert results[length] < results[length - 1] * 2

        print("–í—Ä–µ–º—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–ª–∏–Ω –ø–∞—Ä–æ–ª–µ–π:")
        for length, exec_time in results.items():
            print(f"  {length} —Å–∏–º–≤–æ–ª–æ–≤: {exec_time:.4f} —Å–µ–∫")


class TestPerformanceCSRF:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ CSRF —Ç–æ–∫–µ–Ω–æ–≤"""

    @pytest.mark.asyncio
    async def test_csrf_token_generation_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSRF —Ç–æ–∫–µ–Ω–æ–≤"""
        mock_storage = AsyncMock()

        start_time = time.time()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1000 —Ç–æ–∫–µ–Ω–æ–≤
        tokens = []
        for i in range(1000):
            token = await issue_nonce(mock_storage, i, i * 2)
            tokens.append(token)

        end_time = time.time()
        execution_time = end_time - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert len(tokens) == 1000
        assert all(len(t) > 0 for t in tokens)
        assert len(set(tokens)) == 1000  # –í—Å–µ —Ç–æ–∫–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        assert execution_time < 1.0

        print(f"–°–æ–∑–¥–∞–Ω–æ 1000 CSRF —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ {execution_time:.3f} —Å–µ–∫—É–Ω–¥")

    @pytest.mark.asyncio
    async def test_csrf_token_validation_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CSRF —Ç–æ–∫–µ–Ω–æ–≤"""
        mock_storage = AsyncMock()
        mock_storage.get_data.return_value = {"csrf": "test_nonce"}

        start_time = time.time()

        # –í—ã–ø–æ–ª–Ω—è–µ–º 1000 –ø—Ä–æ–≤–µ—Ä–æ–∫
        for _ in range(1000):
            result = await check_nonce(mock_storage, 12345, 67890, "test_nonce")
            assert result is True

        end_time = time.time()
        execution_time = end_time - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        assert execution_time < 1.0

        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ 1000 –ø—Ä–æ–≤–µ—Ä–æ–∫ CSRF —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ {execution_time:.3f} —Å–µ–∫—É–Ω–¥")


class TestPerformanceUserRepository:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    @pytest.mark.asyncio
    async def test_user_creation_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        start_time = time.time()

        # –°–æ–∑–¥–∞–µ–º 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = []
        for i in range(100):
            user = await get_user(1000000 + i)
            users.append(user)

        end_time = time.time()
        execution_time = end_time - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert len(users) == 100
        assert all(user.tg_id == 1000000 + i for i, user in enumerate(users))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        assert execution_time < 10.0  # –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑-–∑–∞ –ë–î

        print(f"–°–æ–∑–¥–∞–Ω–æ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {execution_time:.3f} —Å–µ–∫—É–Ω–¥")

    @pytest.mark.asyncio
    async def test_user_update_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = list(range(2000000, 2000100))
        for user_id in user_ids:
            await get_user(user_id)

        start_time = time.time()

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in user_ids:
            await update_user_intro(user_id, True)

        end_time = time.time()
        execution_time = end_time - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        assert execution_time < 15.0  # –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑-–∑–∞ –ë–î

        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {execution_time:.3f} —Å–µ–∫—É–Ω–¥")


class TestPerformanceLoadTesting:
    """–¢–µ—Å—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    @pytest.mark.asyncio
    async def test_simultaneous_operations(self):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        start_time = time.time()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        tasks = []

        # Rate limiting –æ–ø–µ—Ä–∞—Ü–∏–∏
        for i in range(100):
            task = hit(f"load_key_{i}", 50, 60)
            tasks.append(task)

        # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
        for i in range(50):
            task = asyncio.to_thread(hash_pwd, f"password_{i}")
            tasks.append(task)

        # CSRF –æ–ø–µ—Ä–∞—Ü–∏–∏
        mock_storage = AsyncMock()
        for i in range(50):
            task = issue_nonce(mock_storage, i, i * 2)
            tasks.append(task)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)

        end_time = time.time()
        execution_time = end_time - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert len(results) == 200
        assert all(not isinstance(r, Exception) for r in results)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        assert execution_time < 5.0

        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ 200 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {execution_time:.3f} —Å–µ–∫—É–Ω–¥")

    @pytest.mark.asyncio
    async def test_memory_efficiency(self):
        """–¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        import os

        import psutil

        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB

        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
        operations = []

        # Rate limiting
        for i in range(500):
            operations.append(hit(f"memory_test_{i}", 10, 60))

        # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        for i in range(500):
            operations.append(asyncio.to_thread(hash_pwd, f"pwd_{i}"))

        # CSRF
        mock_storage = AsyncMock()
        for i in range(500):
            operations.append(issue_nonce(mock_storage, i, i))

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        await asyncio.gather(*operations, return_exceptions=True)

        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_increase = final_memory - initial_memory

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Ä–∞–∑—É–º–Ω–æ–µ
        assert memory_increase < 100.0  # –ù–µ –±–æ–ª–µ–µ 100MB

        print(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ 1500 –æ–ø–µ—Ä–∞—Ü–∏–π: {memory_increase:.2f} MB")


class TestPerformanceBenchmarks:
    """–ë–µ–Ω—á–º–∞—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    @pytest.mark.asyncio
    async def test_rate_limiter_benchmark(self):
        """–ë–µ–Ω—á–º–∞—Ä–∫ rate limiter"""
        print("\n=== –ë–µ–Ω—á–º–∞—Ä–∫ Rate Limiter ===")

        # –¢–µ—Å—Ç 1: –û–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        start_time = time.time()
        for i in range(1000):
            await hit(f"benchmark_single_{i}", 100, 60)
        single_time = time.time() - start_time

        # –¢–µ—Å—Ç 2: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        start_time = time.time()
        tasks = [hit(f"benchmark_concurrent_{i}", 100, 60) for i in range(1000)]
        await asyncio.gather(*tasks)
        concurrent_time = time.time() - start_time

        print(f"–û–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (1000): {single_time:.3f} —Å–µ–∫")
        print(f"–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (1000): {concurrent_time:.3f} —Å–µ–∫")
        print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {single_time / concurrent_time:.2f}x")

    def test_password_hashing_benchmark(self):
        """–ë–µ–Ω—á–º–∞—Ä–∫ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π"""
        print("\n=== –ë–µ–Ω—á–º–∞—Ä–∫ Password Hashing ===")

        passwords = [
            "short",
            "medium_password_123",
            "very_long_password_with_many_characters_and_numbers_123456789",
            "unicode_password_üöÄüåü‚ú®",
            "special_chars_!@#$%^&*()_+-=[]{}|;':\",./<>?",
        ]

        for password in passwords:
            start_time = time.time()
            hashed = hash_pwd(password)
            hash_time = time.time() - start_time

            start_time = time.time()
            result = check_pwd(password, hashed)
            verify_time = time.time() - start_time

            print(f"–ü–∞—Ä–æ–ª—å ({len(password)} —Å–∏–º–≤–æ–ª–æ–≤):")
            print(f"  –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {hash_time:.4f} —Å–µ–∫")
            print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞: {verify_time:.4f} —Å–µ–∫")
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

    @pytest.mark.asyncio
    async def test_csrf_benchmark(self):
        """–ë–µ–Ω—á–º–∞—Ä–∫ CSRF –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print("\n=== –ë–µ–Ω—á–º–∞—Ä–∫ CSRF ===")

        mock_storage = AsyncMock()

        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        start_time = time.time()
        tokens = []
        for i in range(1000):
            token = await issue_nonce(mock_storage, i, i * 2)
            tokens.append(token)
        generation_time = time.time() - start_time

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        mock_storage.get_data.return_value = {"csrf": "test_nonce"}
        start_time = time.time()
        for _ in range(1000):
            await check_nonce(mock_storage, 12345, 67890, "test_nonce")
        validation_time = time.time() - start_time

        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (1000): {generation_time:.3f} —Å–µ–∫")
        print(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (1000): {validation_time:.3f} —Å–µ–∫")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(set(tokens))}")


@pytest.fixture
def performance_config():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return {
        "rate_limit_requests": 1000,
        "password_iterations": 1000,
        "csrf_iterations": 1000,
        "user_operations": 100,
        "timeout_seconds": 30,
    }
