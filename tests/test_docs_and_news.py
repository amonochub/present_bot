"""
–¢–µ—Å—Ç—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram.types import Message, CallbackQuery, User as TelegramUser
from aiogram.filters import Command

from app.routes.docs import (
    show_docs,
    send_doc_link,
    back_to_docs_list,
    show_news,
    admin_announce,
    get_recipients
)
from app.repositories.user_repo import get_user
from app.i18n import t
from app.roles import UserRole


class TestDocsAndNews:
    """–¢–µ—Å—Ç—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    @pytest.fixture
    def mock_message(self):
        """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = MagicMock(spec=Message)
        message.from_user = MagicMock(spec=TelegramUser)
        message.from_user.id = 123456
        message.answer = AsyncMock()
        return message
    
    @pytest.fixture
    def mock_callback(self):
        """–ú–æ–∫ callback"""
        callback = MagicMock(spec=CallbackQuery)
        callback.from_user = MagicMock(spec=TelegramUser)
        callback.from_user.id = 123456
        callback.answer = AsyncMock()
        callback.message = MagicMock()
        callback.message.edit_text = AsyncMock()
        callback.message.answer = AsyncMock()
        return callback
    
    @pytest.mark.asyncio
    async def test_show_docs_success(self, mock_message, monkeypatch):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        # –ú–æ–∫–∞–µ–º get_user
        async def mock_get_user(tg_id):
            user = MagicMock()
            user.role = "teacher"
            return user
        monkeypatch.setattr("app.repositories.user_repo.get_user", mock_get_user)
        
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            key_map = {
                "docs.list_header": "üìÑ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:",
                "docs.item_standard": "‚Ä¢ –ü–æ—Ä—è–¥–æ–∫ –æ–∫–∞–∑–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ‚Äë–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏",
                "docs.item_pay": "‚Ä¢ –ú–µ—Ç–æ–¥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤",
                "docs.item_help": "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–± –ø–æ–º–æ—â–∏",
                "docs.reply_footer": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            }
            return key_map.get(key, key)
        monkeypatch.setattr("app.i18n.t", mock_t)
        
        await show_docs(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args
        assert "üìÑ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:" in call_args[0][0]
        assert call_args[1]["reply_markup"] is not None
    
    @pytest.mark.asyncio
    async def test_show_docs_no_user(self, mock_message, monkeypatch):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ú–æ–∫–∞–µ–º get_user
        async def mock_get_user(tg_id):
            return None
        monkeypatch.setattr("app.routes.docs.get_user", mock_get_user)
        
        await show_docs(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        mock_message.answer.assert_called_once()
        assert "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" in mock_message.answer.call_args[0][0]
    
    @pytest.mark.asyncio
    async def test_send_doc_link_success(self, mock_callback, monkeypatch):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç"""
        mock_callback.data = "doc_standard"
        
        await send_doc_link(mock_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        call_args = mock_callback.message.edit_text.call_args
        assert "–ü–æ—Ä—è–¥–æ–∫ –æ–∫–∞–∑–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏" in call_args[0][0]
        assert call_args[1]["parse_mode"] == "HTML"
        mock_callback.answer.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_send_doc_link_unknown(self, mock_callback, monkeypatch):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        mock_callback.data = "doc_unknown"
        
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            if key == "docs.unknown_doc":
                return "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
            return key
        monkeypatch.setattr("app.routes.docs.t", mock_t)
        
        await send_doc_link(mock_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        mock_callback.message.answer.assert_called_once()
        assert "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" in mock_callback.message.answer.call_args[0][0]
        mock_callback.answer.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_back_to_docs_list(self, mock_callback, monkeypatch):
        """–¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            key_map = {
                "docs.list_header": "üìÑ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:",
                "docs.item_standard": "‚Ä¢ –ü–æ—Ä—è–¥–æ–∫ –æ–∫–∞–∑–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ‚Äë–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏",
                "docs.item_pay": "‚Ä¢ –ú–µ—Ç–æ–¥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤",
                "docs.item_help": "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–± –ø–æ–º–æ—â–∏",
                "docs.reply_footer": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            }
            return key_map.get(key, key)
        monkeypatch.setattr("app.routes.docs.t", mock_t)
        
        await back_to_docs_list(mock_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        call_args = mock_callback.message.edit_text.call_args
        assert "üìÑ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:" in call_args[0][0]
        mock_callback.answer.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_show_news_success(self, mock_message, monkeypatch):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        # –ú–æ–∫–∞–µ–º get_user
        async def mock_get_user(tg_id):
            user = MagicMock()
            user.role = "student"
            return user
        monkeypatch.setattr("app.routes.docs.get_user", mock_get_user)
        
        # –ú–æ–∫–∞–µ–º get_news_cards
        def mock_get_news_cards(limit=5):
            return [
                {
                    "title": "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å",
                    "date": "01.01.2024",
                    "desc": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
                    "url": "https://example.com"
                }
            ]
        monkeypatch.setattr("app.routes.docs.get_news_cards", mock_get_news_cards)
        
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            key_map = {
                "news.card_header": "üì∞ {title}",
                "news.card_date": "–î–∞—Ç–∞: {date}",
                "news.card_desc": "{desc}",
                "news.card_more": "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
            }
            return key_map.get(key, key)
        monkeypatch.setattr("app.routes.docs.t", mock_t)
        
        await show_news(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        assert mock_message.answer.call_count >= 2  # –ù–æ–≤–æ—Å—Ç—å + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
    
    @pytest.mark.asyncio
    async def test_show_news_no_user(self, mock_message, monkeypatch):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ú–æ–∫–∞–µ–º get_user
        async def mock_get_user(tg_id):
            return None
        monkeypatch.setattr("app.routes.docs.get_user", mock_get_user)
        
        await show_news(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        mock_message.answer.assert_called_once()
        assert "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤–æ—Å—Ç—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" in mock_message.answer.call_args[0][0]
    
    @pytest.mark.asyncio
    async def test_show_news_empty(self, mock_message, monkeypatch):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–æ–≥–¥–∞ –∏—Ö –Ω–µ—Ç"""
        # –ú–æ–∫–∞–µ–º get_user
        async def mock_get_user(tg_id):
            user = MagicMock()
            user.role = "student"
            return user
        monkeypatch.setattr("app.routes.docs.get_user", mock_get_user)
        
        # –ú–æ–∫–∞–µ–º get_news_cards
        def mock_get_news_cards(limit=5):
            return []
        monkeypatch.setattr("app.routes.docs.get_news_cards", mock_get_news_cards)
        
        await show_news(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        mock_message.answer.assert_called_once()
        assert "–ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã" in mock_message.answer.call_args[0][0]
    
    @pytest.mark.asyncio
    async def test_admin_announce_success(self, mock_message, monkeypatch):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        mock_message.text = "/announce –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        
        # –ú–æ–∫–∞–µ–º get_user
        async def mock_get_user(tg_id):
            user = MagicMock()
            user.role = UserRole.ADMIN
            return user
        monkeypatch.setattr("app.routes.docs.get_user", mock_get_user)
        
        # –ú–æ–∫–∞–µ–º t —Ñ—É–Ω–∫—Ü–∏—é
        def mock_t(key):
            if key == "admin.announcement":
                return "–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏!\n\n{announcement}\n\n–î–æ–∫—É–º–µ–Ω—Ç: {url}"
            return key
        monkeypatch.setattr("app.routes.docs.t", mock_t)
        
        await admin_announce(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        assert mock_message.answer.call_count >= 2  # –û–±—ä—è–≤–ª–µ–Ω–∏–µ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    
    @pytest.mark.asyncio
    async def test_admin_announce_no_permission(self, mock_message, monkeypatch):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∞–≤"""
        mock_message.text = "/announce –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        
        # –ú–æ–∫–∞–µ–º get_user
        async def mock_get_user(tg_id):
            user = MagicMock()
            user.role = UserRole.STUDENT
            return user
        monkeypatch.setattr("app.routes.docs.get_user", mock_get_user)
        
        await admin_announce(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        mock_message.answer.assert_called_once()
        assert "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π" in mock_message.answer.call_args[0][0]
    
    @pytest.mark.asyncio
    async def test_admin_announce_no_text(self, mock_message, monkeypatch):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"""
        mock_message.text = "/announce"
        
        # –ú–æ–∫–∞–µ–º get_user
        async def mock_get_user(tg_id):
            user = MagicMock()
            user.role = UserRole.ADMIN
            return user
        monkeypatch.setattr("app.routes.docs.get_user", mock_get_user)
        
        await admin_announce(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        mock_message.answer.assert_called_once()
        assert "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce —Ç–µ–∫—Å—Ç_–æ–±—ä—è–≤–ª–µ–Ω–∏—è" in mock_message.answer.call_args[0][0]
    
    def test_get_recipients(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
        recipients = get_recipients("all")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫
        assert isinstance(recipients, list)
        assert len(recipients) > 0 